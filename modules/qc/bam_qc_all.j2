# These macros are run on bams from the dna_alignment and the star_quant modules.
# A cram is made for each bam followed by running BAM qc steps with samtools and gatk.
# Currently supports any sample.

{% from 'modules/qc/stats2json.j2' import stats2json with context %}
{% from 'modules/qc/stats2lims.j2' import stats2lims with context %}

{% macro bam_qc_samtools_stats(sample, libraryCount, sample_lb, taskPrefix=taskPrefix, aligner='minimap2', bam_level=true) %}
{% if tasks[taskPrefix+"_quality_control_stats_samtools_stats"]|default(true) %}

  {% set results_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

  {% if bam_level is sameas false %}
    {% set task %}{{ sample.name }}_{{ sample_lb }}_{{ aligner }}{% endset %}
    {% set temp_dir %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}_{{ sample_lb }}{% endset %}
    {% set bam %}{{ temp_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam{% endset %}
  {% else %}
    {% set task %}{{ sample.name }}_{{ aligner }}{% endset %}
    {% set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.cram{% endset %}
  {% endif %}

  {% set sample_name_string %}{{ sample.name }}_{{ sample_lb }}{% endset %}

  {% set baseQuality_output %}{{ results_dir }}/{{ sample_name_string }}.{{ aligner }}.bam_samtools_baseQualityYield_summary.tsv{% endset %}
  {% set baseQuality_output_json %}{{ results_dir }}/{{ sample_name_string }}.{{ aligner }}.bam_samtools_baseQualityYield_summary.json{% endset %}

  {% set coverage_output %}{{ results_dir }}/{{ sample_name_string }}.{{ aligner }}.bam_samtools_coverage_summary.tsv{% endset %}
  {% set coverage_output_json %}{{ results_dir }}/{{ sample_name_string }}.{{ aligner }}.bam_samtools_coverage_summary.json{% endset %}

  {% set insertSize_output %}{{ results_dir }}/{{ sample_name_string }}.{{ aligner }}.bam_samtools_insertSize_summary.tsv{% endset %}
  {% set insertSize_output_json %}{{ results_dir }}/{{ sample_name_string }}.{{ aligner }}.bam_samtools_insertSize_summary.json{% endset %}

  {% set summaryNumbers_output %}{{ results_dir }}/{{ sample_name_string }}.{{ aligner }}.bam_samtools_summaryNumbers_summary.tsv{% endset %}
  {% set summaryNumbers_output_json %}{{ results_dir }}/{{ sample_name_string }}.{{ aligner }}.bam_samtools_summaryNumbers_summary.json{% endset %}

{% if bam_level is sameas true %}
  {% set bam_level_baseQuality_output %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam_samtools_baseQualityYield_summary.tsv{% endset %}
  {% set bam_level_baseQuality_output_json %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam_samtools_baseQualityYield_summary.json{% endset %}

  {% set bam_level_coverage_output %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam_samtools_coverage_summary.tsv{% endset %}
  {% set bam_level_coverage_output_json %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam_samtools_coverage_summary.json{% endset %}

  {% set bam_level_insertSize_output %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam_samtools_insertSize_summary.tsv{% endset %}
  {% set bam_level_insertSize_output_json %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam_samtools_insertSize_summary.json{% endset %}

  {% set bam_level_summaryNumbers_output %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam_samtools_summaryNumbers_summary.tsv{% endset %}
  {% set bam_level_summaryNumbers_output_json %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam_samtools_summaryNumbers_summary.json{% endset %}
{% endif %}

- name: samtools_stats_{{ task }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_stats, {{ sample.name }}]
  methods: Quality control metrics for {{ sample.name }} ({{ aligner }}) were generated with samtools stats.
  input: 
    - {{ bam }}
    - {{ bam }}.bai
    - {{ constants.grandcanyon.reference_fasta }}
  output:
    - {{ results_dir }}/{{ bam|basename }}.bamstats.txt
    {% if libraryCount == 1 %}
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.bamstats.txt
    {% endif %}
  {% if bam_level is sameas false %}
  reset: predecessors
  {% endif %}
  walltime: "4:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ results_dir }}"

    {#
      samtools view
        -q INT   only include reads with mapping quality >= INT [0]
        -h       include header in SAM output

      samtools stats
       --filtering-flag 256
            not primary alignment (0x100)
       --coverage <int>,<int>,<int>    Coverage distribution min,max,step [1,1000,1]
    #}
    samtools view \
      --threads 4 \
      -q 10 \
      -h \
      --reference {{ constants.grandcanyon.reference_fasta }} \
      "{{ bam }}" \
      | \
    samtools stats \
      --GC-depth 100 \
      --filtering-flag 256 \
      --coverage 1,2500,1 \
      --reference "{{ constants.grandcanyon.reference_fasta }}" \
      > "{{ results_dir }}/{{ bam|basename }}.bamstats.txt"

    {% if libraryCount == 1 %}
      cp {{ results_dir }}/{{ bam|basename }}.bamstats.txt {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.bamstats.txt
    {% endif %}

- name: process_samtools_stats_{{ task }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_stats, {{ sample.name }}]
  methods: Quality control metrics for {{ sample.name }} ({{ aligner }}) were generated with samtools stats.
  input:
    - {{ results_dir }}/{{ bam|basename }}.bamstats.txt
    {% if libraryCount == 1 %}
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.bamstats.txt
    {% endif %}
  output:
    - {{ results_dir }}/{{ bam|basename }}_samtools_baseQualityYield_summary.tsv
    - {{ results_dir }}/{{ bam|basename }}_samtools_coverage_summary.tsv
    - {{ results_dir }}/{{ bam|basename }}_samtools_insertSize_summary.tsv
    - {{ results_dir }}/{{ bam|basename }}_samtools_summaryNumbers_summary.tsv
    - {{ results_dir }}/{{ bam|basename }}_samtools_baseDistribution_linePlot.png
    - {{ results_dir }}/{{ bam|basename }}_samtools_baseQualityDistribution_histogram.png
    - {{ results_dir }}/{{ bam|basename }}_samtools_baseQualityDistribution_histogram.tsv
    - {{ results_dir }}/{{ bam|basename }}_samtools_coverage_histogram.png
    - {{ results_dir }}/{{ bam|basename }}_samtools_coverage_histogram.tsv
    - {{ results_dir }}/{{ bam|basename }}_samtools_gcDepth_histogram.tsv
    - {{ results_dir }}/{{ bam|basename }}_samtools_gcDepth_plot.png
    - {{ results_dir }}/{{ bam|basename }}_samtools_indelDistByCycle_linePlot.png
    - {{ results_dir }}/{{ bam|basename }}_samtools_indelSize_linePlot.png
    - {{ results_dir }}/{{ bam|basename }}_samtools_insertSize_histogram.png
    - {{ results_dir }}/{{ bam|basename }}_samtools_insertSize_histogram.tsv
    - {{ results_dir }}/{{ bam|basename }}_samtools_meanBaseQualityByCycle_histogram.tsv
    - {{ results_dir }}/{{ bam|basename }}_samtools_meanBaseQualityByCycle_lineplot.png
    {% if libraryCount == 1 %}
    - {{ baseQuality_output }}
    - {{ coverage_output }}
    - {{ insertSize_output }}
    - {{ summaryNumbers_output }}
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_baseDistribution_linePlot.png
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_baseQualityDistribution_histogram.png
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_baseQualityDistribution_histogram.tsv
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_coverage_histogram.png
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_coverage_histogram.tsv
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_gcDepth_histogram.tsv
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_gcDepth_plot.png
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_indelDistByCycle_linePlot.png
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_indelSize_linePlot.png
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_insertSize_histogram.png
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_insertSize_histogram.tsv
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_meanBaseQualityByCycle_histogram.tsv
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam_samtools_meanBaseQualityByCycle_lineplot.png
    {% endif %}
  {% if bam_level is sameas false %}
  reset: predecessors
  {% endif %}
  walltime: "4:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.R.container }}
  cmd: |
    set -eu
    set -o pipefail

    cd {{ results_dir }}

    # {{ required_scripts.plotSamStats_Rscript.path }} md5: {{ required_scripts.plotSamStats_Rscript.path | md5 }}
    Rscript {{ required_scripts.plotSamStats_Rscript.path }} \
        --samtoolsStatsFile={{ bam|basename }}.bamstats.txt \
        --bam={{ bam|basename }} \
        --sample={{ sample.name }} \
        --library={{ sample_lb }} \
        --readformat=SingleEnd

    {% if libraryCount == 1 %}
      cp {{ bam|basename }}.bamstats.txt {{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.bamstats.txt

      Rscript {{ required_scripts.plotSamStats_Rscript.path }} \
        --samtoolsStatsFile={{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.bamstats.txt \
        --bam={{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam \
        --sample={{ sample.name }} \
        --library={{ sample_lb }} \
        --readformat=SingleEnd
    {% endif %}

    {% if bam_level is sameas true %}
      {{- stats2json(sample.gltype, sample.name, task, bam_level_summaryNumbers_output, bam_level_summaryNumbers_output_json, "samtools_summaryNumbers_summary", sample=sample, sample_name=sample.name, lims_upload=false) }}
      {{- stats2json(sample.gltype, sample.name, task, bam_level_baseQuality_output, bam_level_baseQuality_output_json, "samtools_baseQualityYield_summary", sample=sample, sample_name=sample.name, lims_upload=false) }}
      {{- stats2json(sample.gltype, sample.name, task, bam_level_coverage_output, bam_level_coverage_output_json, "samtools_coverage_summary", sample=sample, sample_name=sample.name, lims_upload=false) }}
    {% endif %}

    {% if libraryCount == 1 or bam_level is sameas false %}
      {% set task %}{{ sample.name }}_{{ sample_lb }}_{{ aligner }}{% endset %}
      {{- stats2json(sample.gltype, sample.name, task, summaryNumbers_output, summaryNumbers_output_json, "samtools_summaryNumbers_summary", sample=sample, sample_name=sample.name, library_name=sample_lb) }}
      {{- stats2json(sample.gltype, sample.name, task, baseQuality_output, baseQuality_output_json, "samtools_baseQualityYield_summary", sample=sample, sample_name=sample.name, library_name=sample_lb) }}
      {{- stats2json(sample.gltype, sample.name, task, coverage_output, coverage_output_json, "samtools_coverage_summary", sample=sample, sample_name=sample.name, library_name=sample_lb) }}
    {% endif %}

{% endif %}
{% endmacro %}

{% macro bam_qc_samtools_idxstats(sample, libraryCount, sample_lb, taskPrefix=taskPrefix, aligner=aligner, bam_level=true) %}
{% if tasks[taskPrefix+"_quality_control_stats_samtools_idxstats"]|default(true) %}

  {% set results_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

  {% if bam_level is sameas false %}
    {% set task %}{{ sample.name }}_{{ sample_lb }}_{{ aligner }}{% endset %}
    {% set temp_dir %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}_{{ sample_lb }}{% endset %}
    {% set bam %}{{ temp_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam{% endset %}
  {% else %}
    {% set task %}{{ sample.name }}_{{ aligner }}{% endset %}
    {% set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
  {% endif %}

  {% set output %}{{ results_dir }}/{{ bam|basename }}.idxstats.txt{% endset %}
  {% set sample_lb_output %}{{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.idxstats.txt{% endset %}
  {% set json %}{{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.idxstats.json{% endset %}


- name: samtools_idxstats_{{ task }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_idxstats, {{ sample.name }}]
  methods: Index stats for {{ sample.name }} ({{ aligner }}) were
    generated with samtools idxstats.
  input: 
    - {{ bam }}
    - {{ bam }}.bai
  output:
    - {{ output }}
    {% if libraryCount == 1 %}
    - {{ sample_lb_output }}
    {% endif %}
  {% if bam_level is sameas false %}
  reset: predecessors
  {% endif %}
  walltime: "4:00:00"
  cpus: 1
  mem: 2G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ results_dir }}"

    samtools idxstats \
      "{{ bam }}" >\
      "{{ output }}"

    {% if libraryCount == 1 %}
      cp {{ output }} {{ sample_lb_output }}
    {% endif %}

  {% if libraryCount == 1 %}
    {{- stats2json(sample.gltype, sample.name, task, sample_lb_output, json, "samtools_idxstats", sample=sample, sample_name=sample.name, library_name=sample_lb) }}
  {% elif bam_level is sameas false %}
    {{- stats2json(sample.gltype, sample.name, task, output, json, "samtools_idxstats", sample=sample, sample_name=sample.name, library_name=sample_lb) }}
  {% endif %}

{% endif %}
{% endmacro %}


{% macro bam_qc_gatk_collectmultiplemetrics(sample, libraryCount, sample_lb, taskPrefix=taskPrefix, aligner=aligner, bam_level=true) %}
{% if tasks[taskPrefix+"_quality_control_stats_gatk_CollectMultipleMetrics"]|default(true) %}

  {% set results_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

  {% if bam_level is sameas false %}
    {% set task %}{{ sample.name }}_{{ sample_lb }}_{{ aligner }}{% endset %}
    {% set temp_dir %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}_{{ sample_lb }}{% endset %}
    {% set bam %}{{ temp_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam{% endset %}
  {% else %}
    {% set task %}{{ sample.name }}_{{ aligner }}{% endset %}
    {% set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
  {% endif %}

  {% set alignment_summary_metrics %}{{ results_dir }}/{{ bam|basename }}.alignment_summary_metrics{% endset %}
  {% set alignment_summary_metrics_json %}{{ alignment_summary_metrics }}.json{% endset %}

  {% set insert_size_metrics %}{{ results_dir }}/{{ bam|basename }}.insert_size_metrics{% endset %}
  {% set insert_size_metrics_json %}{{ insert_size_metrics }}.json{% endset %}

  {% set gc_bias_metrics %}{{ results_dir }}/{{ bam|basename }}.gc_bias.summary_metrics{% endset %}
  {% set gc_bias_metrics_json %}{{ gc_bias_metrics }}.json{% endset %}

  {% set error_metrics %}{{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.error_summary_metrics{% endset %}
  {% set quality_yield_metrics %}{{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_yield_metrics{% endset %}
  {% set error_metrics_json %}{{ error_metrics }}.json{% endset %}
  {% set quality_yield_metrics_json %}{{ quality_yield_metrics }}.json{% endset %}

- name: gatk_collectmultiplemetrics_{{ task }}
  tags: [{{ sample.gltype }}, quality_control, stats, gatk_CollectMultipleMetrics, {{ sample.name }}]
  methods: Alignment metrics, base distribution, insert size, quality,
    and other metrics for {{ sample.name }} ({{ aligner }}) were
    gathered with gatk CollectMultipleMetrics.
  input: 
    - {{ bam }}
    - {{ bam }}.bai
    - {{ constants.grandcanyon.reference_fasta }}
  output:
    - {{ results_dir }}/{{ bam|basename }}.alignment_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.bait_bias_detail_metrics
    - {{ results_dir }}/{{ bam|basename }}.bait_bias_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.base_distribution_by_cycle_metrics
    - {{ results_dir }}/{{ bam|basename }}.base_distribution_by_cycle.pdf
    - {{ results_dir }}/{{ bam|basename }}.error_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.gc_bias.detail_metrics
    - {{ results_dir }}/{{ bam|basename }}.gc_bias.pdf
    - {{ results_dir }}/{{ bam|basename }}.gc_bias.summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.insert_size_metrics
    - {{ results_dir }}/{{ bam|basename }}.insert_size_histogram.pdf
    - {{ results_dir }}/{{ bam|basename }}.pre_adapter_detail_metrics
    - {{ results_dir }}/{{ bam|basename }}.pre_adapter_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.quality_by_cycle_metrics
    - {{ results_dir }}/{{ bam|basename }}.quality_by_cycle.pdf
    - {{ results_dir }}/{{ bam|basename }}.quality_distribution_metrics
    - {{ results_dir }}/{{ bam|basename }}.quality_distribution.pdf
    - {{ results_dir }}/{{ bam|basename }}.quality_yield_metrics
    {% if libraryCount == 1 %}
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.base_distribution_by_cycle_metrics
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.base_distribution_by_cycle.pdf
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.error_summary_metrics
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_by_cycle_metrics
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_by_cycle.pdf
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_distribution_metrics
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_distribution.pdf
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_yield_metrics
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.gc_bias.pdf
    - {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.insert_size_histogram.pdf
    {% endif %}
  {% if bam_level is sameas false %}
  reset: predecessors
  {% endif %}
  walltime: "24:00:00"
  cpus: 2
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ results_dir }}"

    gatk CollectMultipleMetrics \
      --java-options "-Xmx7G" \
      --INPUT "{{ bam }}" \
      --OUTPUT "{{ results_dir }}/{{ bam|basename }}" \
      --REFERENCE_SEQUENCE "{{ constants.grandcanyon.reference_fasta }}" \
      --METRIC_ACCUMULATION_LEVEL null \
      --METRIC_ACCUMULATION_LEVEL LIBRARY \
      --METRIC_ACCUMULATION_LEVEL SAMPLE \
      --PROGRAM null \
      --PROGRAM CollectAlignmentSummaryMetrics \
      --PROGRAM CollectBaseDistributionByCycle \
      --PROGRAM CollectInsertSizeMetrics \
      --PROGRAM MeanQualityByCycle \
      --PROGRAM QualityScoreDistribution \
      --PROGRAM CollectGcBiasMetrics \
      --PROGRAM CollectSequencingArtifactMetrics \
      --PROGRAM CollectQualityYieldMetrics

    {% if libraryCount == 1 %}
      cp {{ results_dir }}/{{ bam|basename }}.base_distribution_by_cycle_metrics {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.base_distribution_by_cycle_metrics
      cp {{ results_dir }}/{{ bam|basename }}.base_distribution_by_cycle.pdf {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.base_distribution_by_cycle.pdf
      cp {{ results_dir }}/{{ bam|basename }}.error_summary_metrics {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.error_summary_metrics
      cp {{ results_dir }}/{{ bam|basename }}.quality_by_cycle_metrics {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_by_cycle_metrics
      cp {{ results_dir }}/{{ bam|basename }}.quality_by_cycle.pdf {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_by_cycle.pdf
      cp {{ results_dir }}/{{ bam|basename }}.quality_distribution_metrics {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_distribution_metrics
      cp {{ results_dir }}/{{ bam|basename }}.quality_distribution.pdf {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_distribution.pdf
      cp {{ results_dir }}/{{ bam|basename }}.quality_yield_metrics {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.quality_yield_metrics

      cp {{ results_dir }}/{{ bam|basename }}.gc_bias.pdf {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.gc_bias.pdf
      cp {{ results_dir }}/{{ bam|basename }}.insert_size_histogram.pdf {{ results_dir }}/{{ sample.name }}_{{ sample_lb }}.{{ aligner }}.bam.insert_size_histogram.pdf

      {{- stats2json(sample.gltype, sample.name, task, error_metrics, error_metrics_json, "picard_error_summary_metrics", sample=sample, sample_name=sample.name, library_name=sample_lb) }}
      {{- stats2json(sample.gltype, sample.name, task, quality_yield_metrics, quality_yield_metrics_json, "picard_quality_yield_metrics", sample=sample, sample_name=sample.name, library_name=sample_lb) }}

    {% elif bam_level is sameas false %}
      {{- stats2json(sample.gltype, sample.name, task, error_metrics, error_metrics_json, "picard_error_summary_metrics", sample=sample, sample_name=sample.name, library_name=sample_lb) }}
      {{- stats2json(sample.gltype, sample.name, task, quality_yield_metrics, quality_yield_metrics_json, "picard_quality_yield_metrics", sample=sample, sample_name=sample.name, library_name=sample_lb) }}
    {% endif %}

  {% if bam_level is sameas true %}
    {{- stats2json(sample.gltype, sample.name, task, alignment_summary_metrics, alignment_summary_metrics_json, "picard_alignment_summary_metrics", sample=sample) }}
    {{- stats2json(sample.gltype, sample.name, task, insert_size_metrics, insert_size_metrics_json, "picard_insert_size_metrics", sample=sample) }}
    {{- stats2json(sample.gltype, sample.name, task, gc_bias_metrics, gc_bias_metrics_json, "picard_gc_bias_summary_metrics", sample=sample) }}
  {% endif %}

{% endif %}
{% endmacro %}

