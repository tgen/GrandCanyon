{% macro whatshap_phase(sample, aligner, variant_caller) %}

{%- set input_bam %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{%- set input_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.{{ variant_caller }}.pass.vcf.gz{% endset %}
{%- set temp_dir %}temp/{{ sample.gltype }}/constitutional_variant_calls/{{ variant_caller }}/{{ sample.name }}_{{ aligner }}{% endset %}
{%- set results_dir %}{{ sample.gltype }}/constitutional_variant_calls/{{ variant_caller }}/{{ sample.name }}_{{ aligner }}{% endset %}
{%- set output_prefix %}{{ sample.name }}.{{ aligner }}.{{ variant_caller }}.whatshap{% endset %}
{%- set phased_vcf %}{{ results_dir }}/{{ output_prefix }}.phased.vcf.gz{% endif %}
{% do sample.update({'phased_vcf': phased_vcf}) %}

- name: whatshap_phase_{{ variant_caller }}_{{ sample.name }}_{{ aligner }}
  input:
    - {{ input_vcf }}
    - {{ input_bam }}
    - {{ input_bam }}.bai
    - {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    - {{ phased_vcf }}
  cpus: 2
  mem: 32G
  walltime: "8:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.whatshap.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ results_dir }}

    whatshap phase \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      --output {{ phased_vcf }} \
      --ignore-read-groups \
      --use-supplementary \
      {{ input_vcf }} \
      {{ input_bam }}

    tabix --threads 2 -C {{ phased_vcf }}

- name: whatshap_stats_{{ variant_caller }}_{{ sample.name }}_{{ aligner }}
  input:
    - {{ phased_vcf }}
  output:
    - {{ results_dir }}/{{ output_prefix }}.phased_stats.tsv
    - {{ results_dir }}/{{ output_prefix }}.phased.gtf
  cpus: 2
  mem: 8G
  walltime: "8:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.whatshap.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ results_dir }}

    whatshap stats \
      --tsv {{ results_dir }}/{{ output_prefix }}.phased_stats.tsv \
      --gtf {{ results_dir }}/{{ output_prefix }}.phased.gtf \
      {{ results_dir }}/{{ output_prefix }}.phased.vcf.gz


- name: whatshap_stats_extended_{{ variant_caller }}_{{ sample.name }}_{{ aligner }}
  input:
    - {{ constants.grandcanyon[reference].gtf }}
    - {{ results_dir }}/{{ output_prefix }}.phased.gtf
  output:
    - {{ results_dir }}/{{ output_prefix }}.phased_gene_stats.tsv
  cpus: 1
  mem: 2G
  walltime: "1:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bedtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ temp_dir }}

    awk -F '[\t"]' '$1 !~ /^#/ { if ($3 == "gene") { OFS = "\t" ; print $1, $4, $5, $10 }}' {{ constants.grandcanyon[reference].gtf }} |\
      sort -k1,1V -k2,2n -k3,3n > {{ temp_dir }}/gtf_to_gene.bed
    awk -F '[\t"]' '$1 !~ /^#/ { if ($3 == "CDS" && $4 < $5) { OFS = "\t" ; print $1, $4, $5, "CDS" }}' {{ constants.grandcanyon[reference].gtf }} | awk '!dup[$0]++' | \
      sort -k1,1V -k2,2n -k3,3n | bedtools merge -i - > {{ temp_dir }}/gtf_to_cds.bed

    PHASED_GENES=$(bedtools intersect \
      -a {{ temp_dir }}/gtf_to_gene.bed \
      -b {{ results_dir }}/{{ output_prefix }}.phased.gtf \
      -wa -f 1.0 | wc -l)

    TOTAL_GENES=$(cat {{ temp_dir }}/gtf_to_gene.bed | wc -l)

    PERCENT_GENES=$(echo $PHASED_GENES $TOTAL_GENES | awk '{ print $1/$2 }')

    PERCENT_CDS=$(bedtools intersect \
      -a <(awk '{ OFS="\t" ; print $1,$2,$3,$3-$2 }' {{ temp_dir }}/gtf_to_cds.bed) \
      -b {{ results_dir }}/{{ output_prefix }}.phased.gtf -wao \
      | awk '{ cds_sum+=$4 ; phased_sum+=$NF } END { print phased_sum/cds_sum }')

    echo -e "SOURCE\tPHASED_GENES\tTOTAL_GENES\tPERCENT_PHASED_GENES\tPERCENT_PHASED_CDS_BASES" > {{ results_dir }}/{{ output_prefix }}.phased_gene_stats.tsv
    echo -e "{{ output_prefix }}\t${PHASED_GENES}\t${TOTAL_GENES}\t${PERCENT_GENES}\t${PERCENT_CDS}" >> {{ results_dir }}/{{ output_prefix }}.phased_gene_stats.tsv

{% endmacro %}

{% macro whatshap_haplotag(sample, aligner, variant_caller, phased_vcf='none' ) %}

{% if phased_vcf == 'none' %}
{%- set phased_vcf %}{{ sample.phased_vcf }}{% endset %}
{% endif %}
{%- set input_bam %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{%- set output_prefix %}{{ sample.name }}.{{ aligner }}.{{ variant_caller }}.whatshap{% endset %}
{% if tasks['keep_phased_bam']|default(false) %}
  {%- set output_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}{% endset %}
{% else %}
  {%- set output_dir %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}{% endset %}
{% endif %}
{% set phased_bam %}{{ output_dir }}/{{ output_prefix }}.haplotagged.bam{% endif %}
{% do sample.update({'phased_bam': phased_bam}) %}

- name: whatshap_haplotag_{{ variant_caller }}_{{ sample.name }}_{{ aligner }}
  input:
    - {{ phased_vcf }}
    - {{ input_bam }}
    - {{ input_bam }}.bai
    - {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    - {{ output_dir }}/{{ output_prefix }}.haplotagged.bam
  cpus: 8
  mem: 32G
  walltime: "8:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.whatshap.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ output_dir }}

    if ls {{ output_dir }}/{{ output_prefix }}.haplotagged.bam ; then
      echo "{{ output_dir }}/{{ output_prefix }}.haplotagged.bam already exists! Skipping whatshap haplotagging!"
    else
      whatshap haplotag \
        --reference {{ constants.grandcanyon[reference].reference_fasta }} \
        -o {{ output_dir }}/{{ output_prefix }}.haplotagged.bam \
        --ignore-read-groups \
        --tag-supplementary \
        --skip-missing-contigs \
        --output-threads=4 \
        {{ phased_vcf }} \
        {{ input_bam }}
    fi

{% endmacro %}
