{% from 'modules/variant_calling/snv_indel/deepvariant.j2' import deepvariant with context %}
{% from 'modules/variant_calling/snv_indel/deepsomatic.j2' import deepsomatic with context %}
{% from 'modules/variant_calling/snv_indel/deeptrio.j2' import deeptrio with context %}
{% from 'modules/variant_calling/snv_indel/glnexus.j2' import glnexus with context %}
{% from 'modules/variant_calling/snv_indel/clair3.j2' import clair3 with context %}
{% from 'modules/variant_calling/snv_indel/clairs.j2' import clairs with context %}
{% from 'modules/variant_calling/snv_indel/haplotypecaller.j2' import haplotypecaller with context %}
{% from 'modules/variant_calling/snv_indel/longshot.j2' import longshot with context %}
{% from 'modules/variant_calling/snv_indel/lancet2.j2' import lancet2 with context %}
{% from 'modules/variant_calling/snv_indel/mutect2.j2' import mutect2 with context %}
{% from 'modules/variant_calling/snv_indel/strelka2.j2' import strelka2 with context %}
{% from 'modules/variant_calling/snv_indel/vardict.j2' import vardict with context %}
{% from 'modules/variant_calling/snv_indel/vcfmerger2.j2' import vcfmerger2 with context %}

{% from 'modules/variant_calling/structural/cutesv.j2' import cutesv with context %}
{% from 'modules/variant_calling/structural/sniffles.j2' import sniffles with context %}
{% from 'modules/variant_calling/structural/pbsv.j2' import pbsv with context %}
{% from 'modules/variant_calling/structural/severus.j2' import severus with context %}
{% from 'modules/variant_calling/structural/dysgu.j2' import dysgu with context %}
{% from 'modules/variant_calling/structural/manta.j2' import manta with context %}
{% from 'modules/variant_calling/structural/gridss.j2' import gridss with context %}
{% from 'modules/variant_calling/structural/smoove.j2' import smoove with context %}

{% from 'modules/variant_calling/copy_number/spectre.j2' import spectre with context %}
{% from 'modules/variant_calling/copy_number/hifi_cnv.j2' import hifi_cnv with context %}
{% from 'modules/variant_calling/copy_number/gatk_cnv.j2' import gatk_cnv with context %}
{% from 'modules/variant_calling/copy_number/cnvkit.j2' import cnvkit with context %}

{% from 'modules/variant_calling/whatshap.j2' import whatshap_haplotag with context %}
{% from 'modules/variant_calling/whatshap.j2' import whatshap_phase with context %}

{% from 'utilities/create_ped.j2' import create_ped with context %}

{%- macro constitutional_variant_calling(samples) %}

{%- for sample in samples.values() if sample.gltype in ('exome','genome') and sample.subGroup|lower in ('constitutional','germline','normal','control') %}

  {% for aligner in sample.aligners %}

    {% if sample.gltype in 'exome' %}
      {% set taskPrefix = 'Exome' %}
    {% elif sample.gltype in 'genome' %}
      {% set taskPrefix = 'Genome' %}
    {% endif %}

    {############
    # snv and indel variant callers
    ############}

    {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_deepvariant"]|default(false) %}
      {{- deepvariant(sample, aligner) }}
      {% do sample.update({'phased_bam': '', 'phased_vcf': ''}) %}
      {{- whatshap_phase(sample, aligner, 'deepvariant') }}
      {{- whatshap_haplotag(sample, aligner, 'deepvariant') }}
    {% endif %}

    {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_haplotypecaller"]|default(false) %}
      {{- haplotypecaller(sample, aligner) }}
    {% endif %}

    {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_clair3"]|default(false) %}
      {{- clair3(sample, aligner) }}
    {% endif %}

    {% if sample.glprep in 'longread' %}
      {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_longshot"]|default(false) %}
        {{- longshot(sample, aligner) }}
      {% endif %}
    {% endif %}

    {############
    # structural variant callers
    ############}

    {% if sample.glprep in 'longread' %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_cutesv"]|default(false) %}
        {{- cutesv(sample, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_sniffles"]|default(false) %}
        {{- sniffles(sample, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_dysgu"]|default(false) %}
        {{- dysgu(sample, aligner) }}
      {% endif %}

      {% if sample.rgpl in ('PACBIO') %}
        {% if tasks[taskPrefix+"_variant_calling_structural_caller_pbsv"]|default(false) %}
          {{- pbsv(sample, aligner) }}
        {% endif %}
      {% endif %}

    {% else %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_gridss"]|default(false) %}
        {{- gridss(sample, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_manta"]|default(false) %}
        {{- manta(sample, aligner) }}
      {% endif %}

    {% endif %}

    {############
    # copy number variant callers
    ############}

    {% if sample.glprep in 'longread' %}

      {% if tasks[taskPrefix+"_variant_calling_cna_caller_spectre"]|default(false) %}
        {{- spectre(sample, aligner) }}
      {% endif %}

      {% if sample.rgpl in ('PACBIO') %}
        {% if tasks[taskPrefix+"_variant_calling_cna_caller_hificnv"]|default(false) %}
          {{- hifi_cnv(sample, aligner) }}
        {% endif %}
      {% endif %}

    {% else %}

    {% endif %}

  {% endfor %}

{% endfor %}


{############
# Multisample constitutional variant calling, groups constitutional samples by assayCode for variant calling
############}

{% set sample_tuples = [] %}
{% for assay_code, sample_tuple in samples.values()|selectattr('subGroup', 'eq', 'Constitutional')|groupby('assayCode') %}
  {% set sample = sample_tuple|first %}
  {% set tuple_name %}{{ project }}_{{ assay_code }}{% endset %}
  {% if sample_tuple | length > 1 %}
    {% do sample_tuples.append({'name': tuple_name, 'gltype': sample.gltype, 'samples': sample_tuple}) %}
  {% endif %}
{% endfor %}

{% for sample_tuple in sample_tuples %}
  {% set sample = sample_tuple.samples|first %}
  {% for aligner in sample.aligners %}

    {% if sample.glprep in 'longread' %}

      {% if tasks[sample_tuple.gltype|capitalize+"_variant_calling_structural_caller_sniffles"]|default(false) %}
        {{- sniffles(sample_tuple, aligner) }}
      {% endif %}

    {% endif %}

  {% endfor %}
{% endfor %}

{############
# Trio variant calling is only available if relationships are defined in the input
############}

{% set trio = {} %}
{% if sampleRelations is defined %}
  {% for sample in sampleRelations if sample.paternalID != '' or sample.maternalID != '' %}
    {% set parents = [] %}
    {% if sample.paternalID is defined %}
      {% set paternal = sampleRelations|selectattr('patientID', 'eq', sample.paternalID)|first|default(none) %}
      {% set paternal_sample = samples.values()|selectattr('sampleMergeKey', 'eq', paternal.sampleMergeKey)|first|default(none) %}
      {% if paternal_sample is not none %}
        {% do parents.append(paternal_sample) %}
      {% else %}

      {% endif %}
    {% endif %}
    {% if sample.maternalID is defined %}
      {% set maternal = sampleRelations|selectattr('patientID', 'eq', sample.maternalID)|first|default(none) %}
      {% set maternal_sample = samples.values()|selectattr('sampleMergeKey', 'eq', maternal.sampleMergeKey)|first|default(none) %}
      {% if maternal_sample is not none %}
        {% do parents.append(maternal_sample) %}
      {% else %}

      {% endif %}
    {% endif %}
    {% set child = samples.values()|selectattr('sampleMergeKey', 'eq', sample.sampleMergeKey)|first|default(none) %}
    {% do trio.update({'name': familyCode, 'gltype': child.gltype, 'child': child, 'parents': parents}) %}
  {% endfor %}

  {{- create_ped(trio) }}

  {% for aligner in trio.child.aligners %}

    {% if tasks[trio.gltype|capitalize+"_variant_calling_snp_indel_caller_deeptrio"]|default(false) %}
      {{- deeptrio(trio, aligner) }}
    {% endif %}

    {% if tasks[trio.gltype|capitalize+"_variant_calling_snp_indel_caller_glnexus"]|default(false) %}
      {{- glnexus(trio, aligner) }}
    {% endif %}

  {% endfor %}
{% endif %}

{% endmacro %}

{% macro somatic_variant_calling(samples) %}

{% set pairs = [] %}
{% set tumors_with_normal = [] %}
{% for tumor in samples.values() if tumor.subGroup|lower in ('tumor','tumour','case') and tumor.gltype in ('exome','genome') %}
  {% for normal in samples.values() if normal.subGroup|lower in ('constitutional','germline','normal','control') and normal.gltype == tumor.gltype and normal.assayCode == tumor.assayCode %}
    {% set pair_name = normal.name + '-' + tumor.name %}
    {% do pairs.append({'name': pair_name, 'gltype': normal.gltype, 'glprep': normal.glprep, 'normal': normal, 'tumor': tumor}) %}
    {% do tumors_with_normal.append(tumor) %}
  {% endfor %}
{% endfor %}

{############
# This generates tasks for true tumor only compatible variant callers
############}
{%- for sample in samples.values() if sample.gltype in ('exome','genome') and sample.subGroup|lower in ('tumor','tumour','case') %}

  {% if sample not in tumors_with_normal or allow_tumor_only|default(true) %}

  {% if sample.gltype in 'exome' %}
    {% set taskPrefix = 'Exome' %}
  {% elif sample.gltype in 'genome' %}
    {% set taskPrefix = 'Genome' %}
  {% endif %}
  {% do sample.update({'callers': []}) %}

  {% for aligner in sample.aligners %}

    {############
    # snv and indel variant callers
    ############}
    {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_deepsomatic"]|default(false) %}
      {{- deepsomatic(sample, aligner) }}
    {% endif %}

    {% if sample.glprep not in 'longread' %}

      {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_mutect2"]|default(false) %}
        {% do sample.callers.append('mutect2') %}
        {{- mutect2(sample, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_strelka2"]|default(false) %}
        {% do sample.callers.append('strelka2') %}
        {{- strelka2(sample, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_vardict"]|default(false) %}
        {% do sample.callers.append('vardict') %}
        {{- vardict(sample, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_merge_vcfs_vcfMerger2"]|default(false) %}
        {{- vcfmerger2(sample, aligner) }}
      {% endif %}

    {% endif %}

    {############
    # structural variant callers
    ############}
    {% if sample.glprep in 'longread' %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_severus"]|default(false) %}
        {{- severus(sample, aligner) }}
      {% endif %}

    {% else %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_gridss"]|default(false) %}
        {{- gridss(sample, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_manta"]|default(false) %}
        {{- manta(sample, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_smoove"]|default(false) %}
        {{- smoove(sample, aligner) }}
      {% endif %}

    {% endif %}

    {############
    # copy number variant callers
    ############}

    {% if tasks[taskPrefix+"_variant_calling_cna_caller_cnvkit"]|default(false) %}
      {{- cnvkit(sample, aligner) }}
    {% endif %}

  {% endfor %}

  {% endif %}

{% endfor %}

{# Start of the macro calls that will actually add the tasks to the workflow #}
{% for pair in pairs %}
  {% if pair.gltype in 'exome' %}
    {% set taskPrefix = 'Exome' %}
  {% elif pair.gltype in 'genome' %}
    {% set taskPrefix = 'Genome' %}
  {% endif %}
  {% do pair.update({'callers': []}) %}

  {% for aligner in pair.tumor.aligners %}

    {############
    # snv and indel variant callers
    ############}

    {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_deepsomatic"]|default(false) %}
      {{- deepsomatic(pair, aligner) }}
    {% endif %}

    {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_clairs"]|default(false) %}
      {{- clairs(pair, aligner) }}
    {% endif %}

    {% if pair.glprep not in 'longread' %}

      {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_lancet2"]|default(false) %}
        {% do pair.callers.append('lancet') %}
        {{- lancet2(pair, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_mutect2"]|default(false) %}
        {% do pair.callers.append('mutect2') %}
        {{- mutect2(pair, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_strelka2"]|default(false) %}
        {% do pair.callers.append('strelka2') %}
        {{- strelka2(pair, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_snp_indel_caller_vardict"]|default(false) %}
        {% do pair.callers.append('vardict') %}
        {{- vardict(pair, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_merge_vcfs_vcfMerger2"]|default(false) %}
        {{- vcfmerger2(pair, aligner) }}
      {% endif %}
    {% endif %}

    {############
    # structural variant callers
    ############}

    {% if pair.glprep in 'longread' %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_dysgu"]|default(false) %}
        {{- dysgu(pair, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_severus"]|default(false) %}
        {{- severus(pair, aligner) }}
      {% endif %}

    {% else %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_gridss"]|default(false) %}
        {{- gridss(pair, aligner) }}
      {% endif %}

      {% if tasks[taskPrefix+"_variant_calling_structural_caller_manta"]|default(false) %}
        {{- manta(pair, aligner) }}
      {% endif %}

    {% endif %}

    {############
    # copy number variant callers
    ############}

    {% if tasks[taskPrefix+"_variant_calling_cna_caller_gatk_cnv"]|default(false) %}
      {% if pair.gltype in 'genome' %}
        {{- gatk_cnv(pair, aligner) }}
      {% endif %}
    {% endif %}

    {% if tasks[taskPrefix+"_variant_calling_cna_caller_cnvkit"]|default(false) %}
      {{- cnvkit(pair, aligner) }}
    {% endif %}

  {% endfor %}

{% endfor %}

{% endmacro %}
