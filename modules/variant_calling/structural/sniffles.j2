{% macro sniffles(input, aligner) %}

{% if input.samples is defined %}
  {%- set temp_dir %}temp/{{ input.gltype }}/joint_variant_calls/sniffles/{{ input.name }}_{{ aligner }}{% endset %}
  {%- set results_dir %}{{ input.gltype }}/joint_variant_calls/sniffles/{{ input.name }}_{{ aligner }}{% endset %}
  {%- set all_vcf %}{{ results_dir }}/{{ input.name }}.{{ aligner }}.sniffles.all.vcf.gz{% endset %}
  {%- set pass_vcf %}{{ results_dir }}/{{ input.name }}.{{ aligner }}.sniffles.pass.vcf.gz{% endset %}
{% else %}
  {%- set bam %}temp/{{ input.gltype }}/alignment/{{ aligner }}/{{ input.name }}/{{ input.name }}.{{ aligner }}.bam{% endset %}
  {%- set temp_dir %}temp/{{ input.gltype }}/constitutional_variant_calls/sniffles/{{ input.name }}_{{ aligner }}{% endset %}
  {%- set results_dir %}{{ input.gltype }}/constitutional_variant_calls/sniffles/{{ input.name }}_{{ aligner }}{% endset %}
  {%- set all_vcf %}{{ results_dir }}/{{ input.name }}.{{ aligner }}.sniffles.all.vcf.gz{% endset %}
  {%- set all_snf %}{{ results_dir }}/{{ input.name }}.{{ aligner }}.sniffles.all.snf{% endset %}
  {%- set pass_vcf %}{{ results_dir }}/{{ input.name }}.{{ aligner }}.sniffles.pass.vcf.gz{% endset %}
{% endif %}

- name: sniffles_{{ input.name }}_{{ aligner }}
  reset: predecessors
  input:
    {% if input.samples is defined %}
    {% for sample in input.samples %}
    - {{ sample.gltype }}/constitutional_variant_calls/sniffles/{{ sample.name }}_{{ aligner }}/{{ sample.name }}.{{ aligner }}.sniffles.all.snf
    {% endfor %}
    {% else %}
    - {{ bam }}
    - {{ bam }}.bai
    {% endif %}
    - {{ constants.grandcanyon[reference].reference_fasta }}
    - {{ constants.grandcanyon[reference].reference_dict }}
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
    {% if input.samples is not defined %}
    - {{ all_snf }}
    {% endif %}
  cpus: 8
  mem: 32G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.sniffles.container }}
  cmd: |
    set -eu
    set -o pipefail
    
    rm -r {{ temp_dir }} || true
    mkdir -p {{ temp_dir }}
    mkdir -p {{ results_dir }}

    {# creating calling_intervals on the fly based on reference_dict, this should also accept a user supplied value in the future #}
    grep 'SN:\(chr\)\?[0-9XY]\+\([a-z]\)\?\s' {{ constants.grandcanyon[reference].reference_dict }} |\
      sed 's/SN://;s/LN://' |\
      awk '{ OFS="\t" ; print $2,0,$3-1 }' \
      > {{ temp_dir }}/calling_intervals.bed

    {% if input.samples is defined %}
    TAB=$'\t'
    cat << EOF > {{ temp_dir }}/{{ input.name }}.tsv
    {% for sample in input.samples %}
    {{ sample.gltype }}/constitutional_variant_calls/sniffles/{{ sample.name }}_{{ aligner }}/{{ sample.name }}.{{ aligner }}.sniffles.all.snf${TAB}{{ sample.name }}
    {% endfor %}
    EOF
    {% endif %}

    sniffles \
      {% if input.samples is defined %}
      --threads 1 \
      --input {{ temp_dir }}/{{ input.name }}.tsv \
      --vcf {{ all_vcf }} \
      {% else %}
      --threads 8 \
      --input {{ bam }} \
      --sample-id {{ input.name }} \
      --vcf {{ all_vcf }} \
      --snf {{ all_snf }} \
      {% if input.subGroup|lower == 'tumor' %}
      --mosaic \
      {% endif %}
      {% endif %}
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      --regions {{ temp_dir }}/calling_intervals.bed \
      --allow-overwrite


- name: sniffles_filter_variants_{{ input.name }}_{{ aligner }}
  input:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
  output:
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpus: 1
  mem: 4G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu

    bcftools view \
      --include 'FILTER == "PASS"' \
      --output-type z \
      --output {{ pass_vcf }} \
      --write-index \
      {{ all_vcf }}

{% if input.samples is not defined %}
  {% from 'modules/annotation/main.j2' import annotate_vcfs with context %}
  {{- annotate_vcfs(input, temp_dir, results_dir, pass_vcf, 'minimap2', 'sniffles') }}
{% endif %}

{% endmacro %}
