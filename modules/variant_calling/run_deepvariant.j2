{%- macro run_deepvariant(sample, aligner='bwa', taskPrefix='Genome') %}

{%- set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.cram{% endset %}
{%- set temp_dir %}temp/{{ sample.gltype }}/constitutional_variant_calls/run_deepvariant/{{ sample.name }}_{{ aligner }}{% endset %}
{%- set results_dir %}{{ sample.gltype }}/constitutional_variant_calls/run_deepvariant/{{ sample.name }}_{{ aligner }}{% endset %}
{%- set all_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.run_deepvariant.all.vcf.gz{% endset %}
{%- set all_g_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.run_deepvariant.all.g.vcf.gz{% endset %}
{%- set pass_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.run_deepvariant.pass.vcf.gz{% endset %}

- name: run_deepvariant_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, run_deepvariant, {{ sample.name }}]
  input:
    - {{ bam }}
    - {{ bam }}.bai
    - {{ constants.grandcanyon.reference_fasta }}
  output:
    - {{ all_vcf }}
    - {{ all_g_vcf }}
  cpus: 16
  mem: 64G
  walltime: "24:00:00"
  queue_preset: "DEEPVARIANT"
  container: {{ constants.tools.deepvariant-gpu.container }}
  cmd: |
    set -eu
    set -o pipefail

    rm -r {{ temp_dir }} || true
    mkdir -p {{ temp_dir }}
    mkdir -p {{ results_dir }}

    /opt/deepvariant/bin/run_deepvariant \
      {% if sample.rgpl|lower in ('ont') %}
      --model_type ONT_R104 \
      {% elif sample.rgpl|lower in ('hifi', 'ccs', 'clr') %}
      --model_type PACBIO \
      {% endif %}
      --ref {{ constants.grandcanyon.reference_fasta }} \
      --reads {{ bam }} \
      --num_shards 16 \
      --intermediate_results_dir {{ temp_dir }} \
      --output_vcf {{ all_vcf }} \
      --output_gvcf {{ all_g_vcf }}


- name: run_deepvariant_filter_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, run_deepvariant, {{ sample.name }}]
  input:
    - {{ all_vcf }}
    {% if sample.gltype == 'exome' %}
    - {{ sample.capture_kit.extended_bed }}
    {% endif %}
  output:
    - {{ all_vcf }}.tbi
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpus: 1
  mem: 4G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    bcftools index --tbi --force "{{ all_vcf }}"

    {# Then filter out the PASS variants to a separate file #}
    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS"' \
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"

    bcftools index --tbi --force "{{ pass_vcf }}"

{% endmacro %}
