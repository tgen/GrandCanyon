{% from 'modules/annotation/main.j2' import annotate_vcfs with context %}
{% from 'modules/variant_calling/whatshap.j2' import whatshap_haplotag with context %}
{% from 'modules/variant_calling/whatshap.j2' import whatshap_phase with context %}

{%- macro deepvariant(sample, taskPrefix='Genome') %}

{%- set bam %}{{ sample.gltype }}/alignment/minimap2/{{ sample.name }}/{{ sample.name }}.minimap2.cram{% endset %}
{%- set temp_dir %}temp/{{ sample.gltype }}/constitutional_variant_calls/deepvariant/{{ sample.name }}_minimap2{% endset %}
{%- set results_dir %}{{ sample.gltype }}/constitutional_variant_calls/deepvariant/{{ sample.name }}_minimap2{% endset %}
{%- set all_vcf %}{{ results_dir }}/{{ sample.name }}.minimap2.deepvariant.all.vcf.gz{% endset %}
{%- set all_gvcf %}{{ results_dir }}/{{ sample.name }}.minimap2.deepvariant.all.g.vcf.gz{% endset %}
{%- set pass_vcf %}{{ results_dir }}/{{ sample.name }}.minimap2.deepvariant.pass.vcf.gz{% endset %}

- name: deepvariant_{{ sample.name }}_minimap2
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  input:
    - {{ bam }}
    - {{ bam }}.bai
    - {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    - {{ all_vcf }}
  cpus: 20
  mem: 120G
  walltime: "12:00:00"
  queue_preset: "DEEPVARIANT"
  container: {{ constants.tools.deepvariant.container }}
  cmd: |
    set -eu
    set -o pipefail

    rm -r {{ temp_dir }} || true
    mkdir -p {{ temp_dir }}
    mkdir -p {{ results_dir }}

    run_deepvariant \
      {% if sample.rgpl in ('PACBIO') %}
      --model_type PACBIO \
      {% elif sample.rgpl in ('ONT') %}
      --model_type ONT_R104 \
      {% elif sample.gltype in ('exome') %}
      --model_type WES \
      {% else %}
      --model_type WGS \
      {% endif %}
      --ref {{ constants.grandcanyon[reference].reference_fasta }} \
      --reads {{ bam }} \
      --output_vcf {{ all_vcf }} \
      --output_gvcf {{ all_gvcf }} \
      --sample_name {{ sample.name }} \
      --num_shards 20 \
      --logging_dir {{ temp_dir }}/logs \
      --intermediate_results_dir {{ temp_dir }}/intermediate_results_dir

- name: deepvariant_filter_variants_{{ sample.name }}_minimap2
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  input:
    - {{ all_vcf }}
  output:
    - {{ all_vcf }}.tbi
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpus: 1
  mem: 4G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    bcftools index --tbi --force "{{ all_vcf }}"

    {# Then filter out the PASS variants to a separate file #}
    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS"' \
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"

    bcftools index --tbi --force "{{ pass_vcf }}"


{% set bam %}temp/{{ sample.gltype }}/alignment/minimap2/{{ sample.name }}/{{ sample.name }}.minimap2.bam{% endset %}
{% set output_prefix %}{{ sample.name }}.minimap2.deepvariant.whatshap{% endset %}
{{- whatshap_phase(sample, pass_vcf, bam, temp_dir, results_dir, output_prefix, 'deepvariant') }}
{% set output_prefix %}{{ sample.name }}.minimap2.deepvariant.margin{% endset %}

{#
  to haplotag ONT data use allParams.haplotag.ont-r94g507.json
  to haplotag PacBio HiFi data use allParams.haplotag.pb-hifi.json
  to phase a VCF generated using ONT data use allParams.phase_vcf.ont.json
  to phase a VCF generated using PacBio-HiFi data use: allParams.phase_vcf.pb-hifi.json
#}

- name: deepvariant_margin_{{ sample.name }}_minimap2
  input:
    - {{ pass_vcf }}
    - {{ bam }}
    - {{ bam }}.bai
    - {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    - {{ results_dir }}/{{ output_prefix }}.chunks.csv
    - {{ results_dir }}/{{ output_prefix }}.phased.vcf
    - {{ results_dir }}/{{ output_prefix }}.phaseset.bed
    {% if tasks.margin_phase_keep_phased_bam | default(true) %}
    - {{ temp_dir }}/{{ output_prefix }}.haplotagged.bam
    {% endif %}
  cpus: 8
  mem: 32G
  walltime: "8:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.margin.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ temp_dir }}
    mkdir -p {{ results_dir }}

    margin phase \
      {{ bam }} \
      {{ constants.grandcanyon[reference].reference_fasta }} \
      {{ pass_vcf }} \
      {% if sample.rgpl == 'ONT' %}
      /opt/margin/params/phase/allParams.phase_vcf.ont.json \
      {% elif sample.rgpl == 'PACBIO' %}
      /opt/margin/params/phase/allParams.phase_vcf.pb-hifi.json \
      {% endif %}
      -t 8 \
      {% if not tasks.margin_phase_keep_phased_bam | default(true) %}
      --skipHaplotypeBAM \
      {% endif %}
      -o {{ temp_dir }}/{{ output_prefix }}

    mv {{ temp_dir }}/{{ output_prefix }}.chunks.csv {{ results_dir }}/
    mv {{ temp_dir }}/{{ output_prefix }}.phased.vcf {{ results_dir }}/
    mv {{ temp_dir }}/{{ output_prefix }}.phaseset.bed {{ results_dir }}/


{% if tasks.margin_phase_keep_phased_bam | default(true) %}
- name: deepvariant_margin_samtools_compress_{{ sample.name }}_minimap2
  input:
    - {{ constants.grandcanyon[reference].reference_fasta }}
    - {{ temp_dir }}/{{ output_prefix }}.haplotagged.bam
  output:
    - {{ results_dir }}/{{ output_prefix }}.haplotagged.cram
    - {{ results_dir }}/{{ output_prefix }}.haplotagged.cram.crai
  walltime: "8:00:00"
  cpus: 8
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    {# Convert to compressed VCF #}
    samtools view \
      -@ 8 \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      --no-PG \
      -o {{ results_dir }}/{{ output_prefix }}.haplotagged.cram \
      --write-index \
      {{ temp_dir }}/{{ output_prefix }}.haplotagged.bam

{% endif %}

- name: deepvariant_margin_bcftools_compress_{{ sample.name }}_minimap2
  input:
    - {{ results_dir }}/{{ output_prefix }}.phased.vcf
  output:
    - {{ results_dir }}/{{ output_prefix }}.phased.vcf.gz
    - {{ results_dir }}/{{ output_prefix }}.phased.vcf.gz.tbi
  walltime: "4:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    {# Convert to compressed VCF #}
    bcftools view \
        --threads 4 \
        --output-type z \
        --output-file {{ results_dir }}/{{ output_prefix }}.phased.vcf.gz \
        {{ results_dir }}/{{ output_prefix }}.phased.vcf

    bcftools index --tbi --force {{ results_dir }}/{{ output_prefix }}.phased.vcf.gz

    rm {{ results_dir }}/{{ output_prefix }}.phased.vcf

{% set margin_phased_vcf %}{{ results_dir }}/{{ sample.name }}.minimap2.deepvariant.margin.phased.vcf.gz{% endset %}
{{- annotate_vcfs(sample, temp_dir, results_dir, margin_phased_vcf, taskPrefix, 'minimap2', 'deepvariant') }}
{% set output_prefix %}{{ sample.name }}.minimap2.deepvariant.whatshap{% endset %}
{{- whatshap_haplotag(sample, margin_phased_vcf, bam, temp_dir, results_dir, output_prefix, 'deepvariant') }}

- name: whatshap_stats_deepvariant_margin_{{ sample.name }}_minimap2
  input:
    - {{ results_dir }}/{{ output_prefix }}.phased.vcf.gz
  walltime: "8:00:00"
  cpus: 8
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.whatshap.container }}
  cmd: |
    set -eu
    set -o pipefail

    whatshap stats \
      {{ results_dir }}/{{ output_prefix }}.phased.vcf.gz

{% endmacro %}
