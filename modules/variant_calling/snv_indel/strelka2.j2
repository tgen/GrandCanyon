{% macro strelka2(sample_or_pair, aligner='bwa') %}

{% if sample_or_pair.normal is defined %}
  {%- set normal_bam %}temp/{{ sample_or_pair.gltype }}/alignment/{{ aligner }}/{{ sample_or_pair.normal.name }}/{{ sample_or_pair.normal.name }}.{{ aligner }}.bam{% endset %}
  {%- set tumor_bam %}temp/{{ sample_or_pair.gltype }}/alignment/{{ aligner }}/{{ sample_or_pair.tumor.name }}/{{ sample_or_pair.tumor.name }}.{{ aligner }}.bam{% endset %}
  {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/somatic_variant_calls/strelka2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
  {%- set results_dir %}{{ sample_or_pair.gltype }}/somatic_variant_calls/strelka2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
  {%- set indel_candidates %}{{ sample_or_pair.gltype }}/somatic_structural_calls/manta/{{ sample_or_pair.name }}_{{ aligner }}/{{ sample_or_pair.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz{% endset %}
  {%- set input_config = "paired" %}
{% else %}
  {%- set bam %}temp/{{ sample_or_pair.gltype }}/alignment/{{ aligner }}/{{ sample_or_pair.name }}/{{ sample_or_pair.name }}.{{ aligner }}.bam{% endset %}
  {% if sample_or_pair.subGroup|lower in ('tumor','tumour','case') %}
    {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/somatic_variant_calls/strelka2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set results_dir %}{{ sample_or_pair.gltype }}/somatic_variant_calls/strelka2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set indel_candidates %}{{ sample_or_pair.gltype }}/somatic_structural_calls/manta/{{ sample_or_pair.name }}_{{ aligner }}/{{ sample_or_pair.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz{% endset %}
    {%- set input_config = "tumor_only" %}
  {% else %}
    {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/constitutional_variant_calls/strelka2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set results_dir %}{{ sample_or_pair.gltype }}/constitutional_variant_calls/strelka2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set indel_candidates %}{{ sample_or_pair.gltype }}/constitutional_structural_calls/manta/{{ sample_or_pair.name }}_{{ aligner }}/{{ sample_or_pair.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz{% endset %}
    {%- set input_config = "germline" %}
  {% endif %}
{% endif %}
{% set all_vcf %}{{ results_dir }}/{{ sample_or_pair.name }}.{{ aligner }}.strelka2.all.vcf.gz{% endset %}
{% set pass_vcf %}{{ results_dir }}/{{ sample_or_pair.name }}.{{ aligner }}.strelka2.pass.vcf.gz{% endset %}
{% set call_regions_bed %}{{ temp_dir }}/callRegions.bed{% endset %}

- name: strelka2_prep_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, strelka2, {{ sample_or_pair.name }}]
  input:
    - {{ constants.grandcanyon[reference].reference_dict }}
  output:
    - {{ call_regions_bed }}.gz
  cpus: 1
  mem: 2G
  walltime: "0:10:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    rm -r {{ temp_dir }} || true
    mkdir -p {{ temp_dir }}

    grep 'SN:\(chr\)\?[0-9XY]\+\([a-z]\)\?\s' {{ constants.grandcanyon[reference].reference_dict }} |\
      sed 's/SN://;s/LN://' |\
      awk '{ OFS="\t" ; print $2,0,$3-1 }' \
      > {{ call_regions_bed }}

    bgzip -f {{ call_regions_bed }}
    tabix -f -p bed {{ call_regions_bed }}.gz


{% if aligner in ('bwa') %}
  {% set aligner_prefix = 'bwa_mem2' %}
{% else %}
  {% set aligner_prefix = 'minimap2' %}
{% endif %}
- name: strelka2_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, strelka2, {{ sample_or_pair.name }}]
  reset:
    - strelka2_prep_{{ sample_or_pair.name }}_{{ aligner }}
    {% if input_config in ('paired') %}
    - {{ aligner_prefix }}_samtools_create_temp_bam_{{ sample_or_pair.normal.name }}
    - {{ aligner_prefix }}_samtools_create_temp_bam_{{ sample_or_pair.tumor.name }}
    {% else %}
    - {{ aligner_prefix }}_samtools_create_temp_bam_{{ sample_or_pair.name }}
    {% endif %}
  input:
    {% if input_config in ('paired') %}
    - {{ normal_bam }}
    - {{ normal_bam }}.bai
    - {{ tumor_bam }}
    - {{ tumor_bam }}.bai
    {% else %}
    - {{ bam }}
    - {{ bam }}.bai
    {% endif %}
    - {{ indel_candidates }}
    - {{ indel_candidates }}.tbi
    - {{ call_regions_bed }}.gz
    - {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    {% if input_config in ('paired') %}
    - {{ temp_dir }}/results/variants/somatic.indels.vcf.gz
    - {{ temp_dir }}/results/variants/somatic.snvs.vcf.gz
    {% else %}
    - {{ temp_dir }}/results/variants/variants.vcf.gz
    {% endif %}
  cpus: 20
  mem: 20G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.strelka.container }}
  digest: {{ constants.tools.strelka.digest }}
  cmd: |
    set -eu
    set -o pipefail

    {# Build the Strelka run file #}
    {% if input_config in ('paired') %}
    configureStrelkaSomaticWorkflow.py \
    {% else %}
    configureStrelkaGermlineWorkflow.py \
    {% endif %}
      {% if sample_or_pair.gltype == 'exome' %}
      --exome \
      {% endif %}
      {% if input_config in ('paired') %}
      --normalBam {{ normal_bam }} \
      --tumorBam {{ tumor_bam }} \
      {% else %}
      --bam {{ bam }} \
      {% endif %}
      --indelCandidates {{ indel_candidates }} \
      --ref {{ constants.grandcanyon[reference].reference_fasta }} \
      --callRegions {{ call_regions_bed }}.gz \
      --runDir {{ temp_dir }}

    {# Execute on the local machine with 19 parallel jobs #}
    {{ temp_dir }}/runWorkflow.py -m local -j 19

- name: strelka2_filter_variants_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, strelka2, {{ sample_or_pair.name }}]
  reset: predecessors
  input:
    {% if input_config in ('paired') %}
    - {{ temp_dir }}/results/variants/somatic.indels.vcf.gz
    - {{ temp_dir }}/results/variants/somatic.snvs.vcf.gz
    {% else %}
    - {{ temp_dir }}/results/variants/variants.vcf.gz
    {% endif %}
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpus: 1
  mem: 2G
  walltime: "1:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ results_dir }}

    {# Merge the snvs and indels into a final vcf #}
    {% if input_config in ('paired') %}
    bcftools concat \
      --allow-overlaps \
      {{ temp_dir }}/results/variants/somatic.indels.vcf.gz \
      {{ temp_dir }}/results/variants/somatic.snvs.vcf.gz |\
    bcftools reheader \
      -s <(echo -e "NORMAL {{ sample_or_pair.normal.name }}\nTUMOR {{ sample_or_pair.tumor.name }}") |\
    bcftools view \
      --output-type z \
      --output {{ all_vcf }} \
      --write-index
    {% else %}
    bcftools view \
      --output-type z \
      --output {{ all_vcf }} \
      --write-index \
      {{ temp_dir }}/results/variants/variants.vcf.gz
    {% endif %}

    {# Then filter out the PASS variants to a separate file #}
    bcftools view \
      --include 'FILTER == "PASS"' \
      --output-type z \
      --output {{ pass_vcf }} \
      --write-index \
      {{ all_vcf }}

{% if not tasks[sample_or_pair.gltype|capitalize+"_variant_calling_merge_vcfs_vcfMerger2"]|default(false) %}
{% from 'modules/annotation/main.j2' import annotate_vcfs with context %}
{{- annotate_vcfs(sample_or_pair, temp_dir, results_dir, pass_vcf, aligner, 'strelka2') }}
{% endif %}

{% endmacro %}
