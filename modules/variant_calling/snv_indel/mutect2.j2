{% macro mutect2(sample_or_pair, aligner='bwa') %}

{% if sample_or_pair.normal is defined %}
  {%- set normal_bam %}temp/{{ sample_or_pair.gltype }}/alignment/{{ aligner }}/{{ sample_or_pair.normal.name }}/{{ sample_or_pair.normal.name }}.{{ aligner }}.bam{% endset %}
  {%- set tumor_bam %}temp/{{ sample_or_pair.gltype }}/alignment/{{ aligner }}/{{ sample_or_pair.tumor.name }}/{{ sample_or_pair.tumor.name }}.{{ aligner }}.bam{% endset %}
  {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/somatic_variant_calls/mutect2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
  {%- set results_dir %}{{ sample_or_pair.gltype }}/somatic_variant_calls/mutect2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
  {%- set input_config = "paired" %}
  {% if sample_or_pair.gltype == 'exome' %}
  {%- set capture_kit_bed %}{{ sample_or_pair.tumor.capture_kit.extended_bed }}{% endset %}
  {% endif %}
{% else %}
  {%- set bam %}temp/{{ sample_or_pair.gltype }}/alignment/{{ aligner }}/{{ sample_or_pair.name }}/{{ sample_or_pair.name }}.{{ aligner }}.bam{% endset %}
  {% if sample_or_pair.subGroup|lower in ('tumor','tumour','case') %}
    {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/somatic_variant_calls/mutect2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set results_dir %}{{ sample_or_pair.gltype }}/somatic_variant_calls/mutect2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set input_config = "tumor_only" %}
  {% else %}
    {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/constitutional_variant_calls/mutect2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set results_dir %}{{ sample_or_pair.gltype }}/constitutional_variant_calls/mutect2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set input_config = "germline" %}
  {% endif %}
  {% if sample_or_pair.gltype == 'exome' %}
  {%- set capture_kit_bed %}{{ sample_or_pair.capture_kit.extended_bed }}{% endset %}
  {% endif %}
{% endif %}
{% set all_vcf %}{{ results_dir }}/{{ sample_or_pair.name }}.{{ aligner }}.mutect2.all.vcf.gz{% endset %}
{% set pass_vcf %}{{ results_dir }}/{{ sample_or_pair.name }}.{{ aligner }}.mutect2.pass.vcf.gz{% endset %}

{% for chunk in range(1, num_chunks+1) %}
- name: mutect2_{{ sample_or_pair.name }}_{{ aligner }}_{{ chunk }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, gatk_mutect2, {{ sample_or_pair.name }}]
  reset: predecessors
  input:
    {% if sample_or_pair.normal is defined %}
    - {{ normal_bam }}
    - {{ normal_bam }}.bai
    - {{ tumor_bam }}
    - {{ tumor_bam }}.bai
    {% else %}
    - {{ bam }}
    - {{ bam }}.bai
    {% endif %}
    - {{ constants.grandcanyon[reference].reference_fasta }}
    {% if constants.grandcanyon[reference].tool_resources.mutect2.germline_reference is defined | default(false) %}
    - {{ constants.grandcanyon[reference].tool_resources.mutect2.germline_reference }}
    {% endif %}
    - temp/pipeline_resources/calling_intervals/primary_calling_interval_{{ chunk }}.bed
  output:
    - {{ temp_dir }}/{{ chunk }}.mutect2.vcf.gz
    - {{ temp_dir }}/{{ chunk }}.mutect2.vcf.gz.stats
    - {{ temp_dir }}/{{ chunk }}.f1r2.tar.gz
  cpus: 4
  mem: 16G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ temp_dir }}/temp_mutect2_{{ chunk }}"

    touch "{{ temp_dir }}/{{ chunk }}.f1r2.tar.gz"

    gatk Mutect2 \
      --java-options "-Xmx14G" \
      --tmp-dir {{ temp_dir }}/temp_mutect2_{{ chunk }} \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      -L temp/pipeline_resources/calling_intervals/primary_calling_interval_{{ chunk }}.bed \
      {% if constants.grandcanyon[reference].tool_resources.mutect2.germline_reference is defined | default(false) %}
      --germline-resource {{ constants.grandcanyon[reference].tool_resources.mutect2.germline_reference }} \
      {% endif %}
      {% if input_config in ('paired') %}
      --input "{{ normal_bam }}" \
      --normal-sample "{{ sample_or_pair.normal.rgsm }}" \
      --input "{{ tumor_bam }}" \
      {% else %}
      --input "{{ bam }}" \
      {% endif %}
      --output "{{ temp_dir }}/{{ chunk }}.mutect2.vcf.gz" \
      --f1r2-tar-gz "{{ temp_dir }}/{{ chunk }}.f1r2.tar.gz" \
      --independent-mates true

{% endfor %}

- name: mutect2_merge_chunks_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, gatk_mutect2, {{ sample_or_pair.name }}]
  reset: predecessors
  input:
    {% for chunk in range(1, num_chunks+1) %}
    - {{ temp_dir }}/{{ chunk }}.mutect2.vcf.gz
    {% endfor %}
  output:
    - {{ temp_dir }}/{{ sample_or_pair.name }}_{{ aligner }}.mutect2.raw.vcf.gz
    - {{ temp_dir }}/{{ sample_or_pair.name }}_{{ aligner }}.mutect2.raw.vcf.gz.tbi
  cpus: 1
  mem: 4G
  walltime: "8:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    bcftools concat \
      --output-type z \
      --output "{{ temp_dir }}/{{ sample_or_pair.name }}_{{ aligner }}.mutect2.raw.vcf.gz" \
      {% for chunk in range(1, num_chunks+1) %}
      {% if not loop.last %}
      "{{ temp_dir }}/{{ chunk }}.mutect2.vcf.gz" \
      {% else %}
      "{{ temp_dir }}/{{ chunk }}.mutect2.vcf.gz"
      {% endif %}
      {% endfor %}

    bcftools index --tbi --force "{{ temp_dir }}/{{ sample_or_pair.name }}_{{ aligner }}.mutect2.raw.vcf.gz"

- name: mutect2_merge_stats_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, gatk_mutect2, {{ sample_or_pair.name }}]
  reset: predecessors
  input:
    {% for chunk in range(1, num_chunks+1) %}
    - {{ temp_dir }}/{{ chunk }}.mutect2.vcf.gz.stats
    {% endfor %}
  output: {{ temp_dir }}/merged.stats
  cpus: 2
  mem: 8G
  walltime: "8:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ temp_dir }}/temp_stats

    gatk --java-options "-Xmx7G" MergeMutectStats \
      --tmp-dir {{ temp_dir }}/temp_stats/ \
      {% for chunk in range(1, num_chunks+1) %}
      -stats "{{ temp_dir }}/{{ chunk }}.mutect2.vcf.gz.stats" \
      {% endfor %}
      -O "{{ temp_dir }}/merged.stats"

- name: mutect2_learn_readorientationmodel_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, gatk_mutect2, {{ sample_or_pair.name }}]
  reset: predecessors
  input:
    {% for chunk in range(1, num_chunks+1) %}
    - {{ temp_dir }}/{{ chunk }}.f1r2.tar.gz
    {% endfor %}
  output: {{ temp_dir }}/artifact-priors.tar.gz
  cpus: 2
  mem: 8G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ temp_dir }}/temp_readorientationmodel

    gatk --java-options "-Xmx7G" LearnReadOrientationModel \
      --tmp-dir {{ temp_dir }}/temp_readorientationmodel \
      {% for chunk in range(1, num_chunks+1) %}
      -I "{{ temp_dir }}/{{ chunk }}.f1r2.tar.gz" \
      {% endfor %}
      -O {{ temp_dir }}/artifact-priors.tar.gz

{% if constants.grandcanyon[reference].tool_resources.mutect2.contamination is defined | default(false) %}
{% for chunk in range(1, num_chunks+1) %}
- name: mutect2_GetPileupSummaries_{{ sample_or_pair.name }}_{{ aligner }}_{{ chunk }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, gatk_mutect2, {{ sample_or_pair.name }}]
  input:
    {% if sample_or_pair.normal is defined %}
    - {{ normal_bam }}
    - {{ normal_bam }}.bai
    - {{ tumor_bam }}
    - {{ tumor_bam }}.bai
    {% else %}
    - {{ bam }}
    - {{ bam }}.bai
    {% endif %}
    - {{ constants.grandcanyon[reference].reference_fasta }}
    - {{ constants.grandcanyon[reference].tool_resources.mutect2.contamination }}
    - temp/pipeline_resources/calling_intervals/primary_calling_interval_{{ chunk }}.bed
  output:
    {% if sample_or_pair.normal is defined %}
    - {{ temp_dir }}/{{ chunk }}.tumor-pileups.table
    - {{ temp_dir }}/{{ chunk }}.normal-pileups.table
    {% else %}
    - {{ temp_dir }}/{{ chunk }}.tumor-pileups.table
    {% endif %}
  cpus: 2
  mem: 8G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -eu
    set -o pipefail

    {% if sample_or_pair.normal is defined %}
    mkdir -p "{{ temp_dir }}/temp_GetPileupSummaries_tumor_{{ sample_or_pair.name }}"
    mkdir -p "{{ temp_dir }}/temp_GetPileupSummaries_normal_{{ sample_or_pair.name }}"

    {# GetPileupSummaries this can happen at the same time as the variant calling, no need to wait #}
    {# Tumor pileups #}
    gatk --java-options "-Xmx7G" GetPileupSummaries \
      --tmp-dir {{ temp_dir }}/temp_GetPileupSummaries_tumor_{{ sample_or_pair.name }} \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      -L temp/pipeline_resources/calling_intervals/primary_calling_interval_{{ chunk }}.bed \
      --input "{{ tumor_bam }}" \
      --interval-set-rule UNION \
      --variant {{ constants.grandcanyon[reference].tool_resources.mutect2.contamination }} \
      --output {{ temp_dir }}/{{ chunk }}.tumor-pileups.table

    {# Normal pileups #}
    gatk --java-options "-Xmx7g" GetPileupSummaries \
      --tmp-dir {{ temp_dir }}/temp_GetPileupSummaries_normal_{{ sample_or_pair.name }} \
      -reference {{ constants.grandcanyon[reference].reference_fasta }} \
      -L temp/pipeline_resources/calling_intervals/primary_calling_interval_{{ chunk }}.bed \
      --input "{{ normal_bam }}" \
      --interval-set-rule UNION \
      --variant {{ constants.grandcanyon[reference].tool_resources.mutect2.contamination }} \
      --output {{ temp_dir }}/{{ chunk }}.normal-pileups.table
    {% else %}
    mkdir -p "{{ temp_dir }}/temp_GetPileupSummaries_tumor_{{ sample_or_pair.name }}"

    {# GetPileupSummaries this can happen at the same time as the variant calling, no need to wait #}
    gatk --java-options "-Xmx7G" GetPileupSummaries \
      --tmp-dir {{ temp_dir }}/temp_GetPileupSummaries_tumor_{{ sample_or_pair.name }} \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      -L temp/pipeline_resources/calling_intervals/primary_calling_interval_{{ chunk }}.bed \
      --input "{{ bam }}" \
      --interval-set-rule UNION \
      --variant {{ constants.grandcanyon[reference].tool_resources.mutect2.contamination }} \
      --output {{ temp_dir }}/{{ chunk }}.tumor-pileups.table
    {% endif %}

{% endfor %}

- name: mutect2_merge_pileup_summaries_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, gatk_mutect2, {{ sample_or_pair.name }}]
  reset: predecessors
  input:
    {% for chunk in range(1, num_chunks+1) %}
    - {{ temp_dir }}/{{ chunk }}.tumor-pileups.table
    - {{ temp_dir }}/{{ chunk }}.normal-pileups.table
    {% endfor %}
    - {{ constants.grandcanyon[reference].reference_dict }}
  output:
    - {{ temp_dir }}/merged.tumor-pileups.table.tsv
    - {{ temp_dir }}/merged.normal-pileups.table.tsv
  cpus: 2
  mem: 8G
  walltime: "8:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -eu
    set -o pipefail

    {% if sample_or_pair.normal is defined %}
    mkdir -p {{ temp_dir }}/temp_merge_tumor
    mkdir -p {{ temp_dir }}/temp_merge_normal

    {# Merge tumor pileup #}
    gatk --java-options "-Xmx7G" GatherPileupSummaries \
      --tmp-dir {{ temp_dir }}/temp_merge_tumor/ \
      --sequence-dictionary {{ constants.grandcanyon[reference].reference_dict }} \
      {% for chunk in range(1, num_chunks+1) %}
      -I "{{ temp_dir }}/{{ chunk }}.tumor-pileups.table" \
      {% endfor %}
      -O {{ temp_dir }}/merged.tumor-pileups.table.tsv

    {# Merge normal pileup #}
    gatk --java-options "-Xmx7G" GatherPileupSummaries \
      --tmp-dir {{ temp_dir }}/temp_merge_normal/ \
      --sequence-dictionary {{ constants.grandcanyon[reference].reference_dict }} \
      {% for chunk in range(1, num_chunks+1) %}
      -I "{{ temp_dir }}/{{ chunk }}.normal-pileups.table" \
      {% endfor %}
      -O {{ temp_dir }}/merged.normal-pileups.table.tsv
    {% else %}
    mkdir -p {{ temp_dir }}/temp_merge_tumor

    {# Merge normal pileup #}
    gatk --java-options "-Xmx7G" GatherPileupSummaries \
      --tmp-dir {{ temp_dir }}/temp_merge_tumor/ \
      --sequence-dictionary {{ constants.grandcanyon[reference].reference_dict }} \
      {% for chunk in range(1, num_chunks+1) %}
      -I "{{ temp_dir }}/{{ chunk }}.tumor-pileups.table" \
      {% endfor %}
      -O {{ temp_dir }}/merged.tumor-pileups.table.tsv
    {% endif %}

- name: mutect2_calculate_contamination_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, gatk_mutect2, {{ sample_or_pair.name }}]
  reset: predecessors
  input:
    - {{ temp_dir }}/merged.tumor-pileups.table.tsv
    - {{ temp_dir }}/merged.normal-pileups.table.tsv
  output:
    - {{ temp_dir }}/contamination.table
    - {{ temp_dir }}/segments.table
  cpus: 1
  mem: 4G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ temp_dir }}/temp_calculate_contamination

    gatk --java-options "-Xmx3G" CalculateContamination \
      --tmp-dir {{ temp_dir }}/temp_calculate_contamination \
      -I "{{ temp_dir }}/merged.tumor-pileups.table.tsv" \
      {% if sample_or_pair.normal is defined %}
      -matched "{{ temp_dir }}/merged.normal-pileups.table.tsv" \
      {% endif %}
      -O "{{ temp_dir }}/contamination.table" \
      --tumor-segmentation "{{ temp_dir }}/segments.table"

{% endif %}

- name: mutect2_filter_calls_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, gatk_mutect2, {{ sample_or_pair.name }}]
  reset: predecessors
  input:
    - {{ temp_dir }}/{{ sample_or_pair.name }}_{{ aligner }}.mutect2.raw.vcf.gz
    - {{ temp_dir }}/merged.stats
    - {{ temp_dir }}/artifact-priors.tar.gz
    {% if constants.grandcanyon[reference].tool_resources.mutect2.contamination is defined | default(false) %}
    - {{ temp_dir }}/contamination.table
    - {{ temp_dir }}/segments.table
    {% endif %}
    - {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
  cpus: 2
  mem: 8G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ results_dir }}"
    mkdir -p {{ temp_dir }}/temp_filter

    gatk FilterMutectCalls \
      --tmp-dir {{ temp_dir }}/temp_filter/ \
      --java-options "-Xmx7G" \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      --max-alt-allele-count 2 \
      --variant "{{ temp_dir }}/{{ sample_or_pair.name }}_{{ aligner }}.mutect2.raw.vcf.gz" \
      --stats "{{ temp_dir }}/merged.stats" \
      --ob-priors "{{ temp_dir }}/artifact-priors.tar.gz" \
      {% if constants.grandcanyon[reference].tool_resources.mutect2.contamination is defined | default(false) %}
      --contamination-table "{{ temp_dir }}/contamination.table" \
      --tumor-segmentation "{{ temp_dir }}/segments.table" \
      --filtering-stats "{{ temp_dir }}/filtering.stats" \
      {% endif %}
      --output "{{ all_vcf }}"

- name: mutect2_filter_variants_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, gatk_mutect2, {{ sample_or_pair.name }}]
  input:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
    {% if sample_or_pair.gltype == 'exome' %}
    - {{ capture_kit_bed }}
    {% endif %}
  output:
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpu: 1
  mem: 4G
  walltime: "1:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    bcftools view \
      --include 'FILTER == "PASS"' \
      {% if sample_or_pair.gltype == 'exome' %}
      --targets-file {{ capture_kit_bed }} \
      {% endif %}
      --output-type z \
      --output {{ pass_vcf }} \
      --write-index \
      {{ all_vcf }}

{% if not tasks[sample_or_pair.gltype|capitalize+"_variant_calling_merge_vcfs_vcfMerger2"]|default(false) %}
{% from 'modules/annotation/main.j2' import annotate_vcfs with context %}
{{- annotate_vcfs(sample_or_pair, temp_dir, results_dir, pass_vcf, aligner, 'mutect2') }}
{% endif %}

{% endmacro %}
