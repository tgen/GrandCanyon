{% from 'modules/annotation/main.j2' import annotate_vcfs with context %}

{% macro vcfmerger2(sample_or_pair, aligner='bwa') %}

{% if sample_or_pair.normal is defined %}
  {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/somatic_variant_calls/vcfmerger2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
  {%- set results_dir %}{{ sample_or_pair.gltype }}/somatic_variant_calls/vcfmerger2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
  {%- set input_config = "paired" %}
{% else %}
  {% if sample_or_pair.subGroup|lower in ('tumor','tumour','case') %}
    {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/somatic_variant_calls/vcfmerger2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set results_dir %}{{ sample_or_pair.gltype }}/somatic_variant_calls/vcfmerger2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set input_config = "tumor_only" %}
  {% else %}
    {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/constitutional_variant_calls/vcfmerger2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set results_dir %}{{ sample_or_pair.gltype }}/constitutional_variant_calls/vcfmerger2/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set input_config = "germline" %}
  {% endif %}
{% endif %}
{% set merged_vcf %}{{ results_dir }}/{{ sample_or_pair.name }}.{{ aligner }}.merged.vcf{% endset %}
{% set merged_vcf_gz %}{{ results_dir }}/{{ sample_or_pair.name }}.{{ aligner }}.merged.vcf.gz{% endset %}

{% set vcfs_to_merge=[] %}

{#
# Here we iterate over the callers for each sample_or_pair calculating the necessary
# paths. Callers add themselves to the sample_or_pair object when their macro is used.
#}
{% for caller in sample_or_pair.callers %}
{% if input_config in ("paired") %}
{% set bam %}temp/{{ sample_or_pair.tumor.gltype }}/alignment/{{ aligner }}/{{ sample_or_pair.tumor.name }}/{{ sample_or_pair.tumor.name }}.{{ aligner }}.bam{% endset %}
{% if aligner in "minimap2" %}
{% set aligner_task %}{{ aligner }}_samtools_create_temp_bam_{{ sample_or_pair.tumor.name }}{% endset %}
{% elif aligner in "bwa" %}
{% set aligner_task %}bwa_mem2_samtools_create_temp_bam_{{ sample_or_pair.tumor.name }}{% endset %}
{% endif %}
{% endif %}
{% set gzipped_path %}{{ sample_or_pair.gltype }}/somatic_variant_calls/{{ caller }}/{{ sample_or_pair.name }}_{{ aligner }}/{{ sample_or_pair.name }}.{{ aligner }}.{{ caller }}.pass.vcf.gz{% endset %}
{% set unzipped_path %}{{ temp_dir }}/{{ caller }}.vcf{% endset %}
{% set prepped_path %}{{ temp_dir }}/{{ caller }}.prepz.vcf{% endset %}
{% set filtered_path %}{{ temp_dir }}/{{ caller }}.filt.vcf{% endset %}
{% do vcfs_to_merge.append({
  'gzipped_path': gzipped_path,
  'unzipped_path': unzipped_path,
  'prepped_path': prepped_path,
  'filtered_path': filtered_path
}) %}

- name: vcfmerger2_prep_{{ caller }}_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, merge_vcfs, vcfMerger2, {{ sample_or_pair.name }}]
  input:
    - {{ gzipped_path }}
    {% if input_config in ("paired") %}
    - {{ bam }}
    - {{ constants.grandcanyon[reference].reference_fasta }}
    {% endif %}
  output: {{ prepped_path }}
  {% if input_config in ("paired") %}
  reset: {{ aligner_task }}
  {% endif %}
  cpus: 4
  mem: 8G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  {% if input_config in "paired" %}
  container: {{ constants.tools.vcfmerger.container }}
  digest: {{ constants.tools.vcfmerger.digest }}
  {% else %}
  container: {{ constants.tools.bcftools.container }}
  {% endif %}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ temp_dir }}"
    {% if input_config in "paired" %}
    gunzip -c "{{ gzipped_path }}" > "{{ unzipped_path }}"

    {# Locate the prep_vcf.sh script relative to vcfMerger2.py #}
    PREPVCF="$(dirname $(dirname $(which vcfMerger2.py)))"/prep_vcfs_somatic/prep_vcf_somatic.sh

    ${PREPVCF} \
      --ref-genome "{{ constants.grandcanyon[reference].reference_fasta }}" \
      --dir-work "{{ temp_dir }}" \
      --bam ${PWD}/{{ bam }} \
      --toolname "{{ caller }}" \
      --normal-sname "{{ sample_or_pair.normal.rgsm }}" \
      --tumor-sname "{{ sample_or_pair.tumor.rgsm }}" \
      --vcf "{{ unzipped_path }}" \
      -o "{{ prepped_path }}"
    {% else %}
    bcftools +fill-tags \
      {{ gzipped_path }} \
      -O v \
      -o {{ prepped_path }} \
      -- -t 'FORMAT/AR:1=FORMAT/AF'
    {% endif %}

- name: vcfmerger2_filter_{{ caller }}_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, merge_vcfs, vcfMerger2, {{ sample_or_pair.name }}]
  reset: predecessors
  input: {{ prepped_path }}
  output: {{ filtered_path }}
  cpus: 1
  mem: 4G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    {% if input_config in "paired" %}
    bcftools view \
      --samples "{{ sample_or_pair.normal.rgsm }},{{ sample_or_pair.tumor.rgsm }}" \
      {{ prepped_path }} |\
    bcftools view \
      --output-type v \
      --output {{ filtered_path }} \
      --exclude "(FMT/DP<10 | FMT/AR[0]>=0.02 | FMT/AR[1]<0.05)" \
    {% else %}
    bcftools view \
      --output-type v \
      --output {{ filtered_path }} \
      --exclude "(FMT/DP<10 | FMT/AR<0.05)" \
      {{ prepped_path }}
    {% endif %}

{% endfor %}

- name: vcfmerger2_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, merge_vcfs, vcfMerger2, {{ sample_or_pair.name }}]
  reset: predecessors
  input:
    {% for caller in sample_or_pair.callers %}
    {% set filtered_path %}{{ temp_dir }}/{{ caller }}.filt.vcf{% endset %}
    - {{ filtered_path }}
    {% endfor %}
    - {{ constants.grandcanyon[reference].reference_fasta }}
    - {{ constants.grandcanyon[reference].reference_dict }}
  output: {{ merged_vcf_gz }}
  cpus: 4
  {% if input_config in "tumor_only" %}
  mem: 32G
  {% else %}
  mem: 16G
  {% endif %}
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.vcfmerger.container }}
  digest: {{ constants.tools.vcfmerger.digest }}
  cmd: |
    set -eu
    set -o pipefail

    if [ -d {{ results_dir }} ]
    then
      rm -rf {{ results_dir }}/SummaryPlots_* || true
    fi

    mkdir -p "{{ results_dir }}"

    vcfMerger2.py \
      --skip-prep-vcfs \
      --do-venn \
      --precedence "{{ sample_or_pair.callers|join('|') }}" \
      --toolnames "{{ sample_or_pair.callers|join('|') }}" \
      --vcfs "{{ vcfs_to_merge|map(attribute='filtered_path')|join('|') }}" \
      -g "{{ constants.grandcanyon[reference].reference_fasta }}" \
      --dict "{{ constants.grandcanyon[reference].reference_dict }}" \
      {% if input_config in "paired" %}
      --normal-sname "{{ sample_or_pair.normal.rgsm }}" \
      --tumor-sname "{{ sample_or_pair.tumor.rgsm }}" \
      {% else %}
      --normal-sname {{ sample_or_pair.rgsm }} \
      --tumor-sname {{ sample_or_pair.rgsm }} \
      {% endif %}
      -d "{{ temp_dir }}" \
      -o "{{ merged_vcf }}"

    {#
    # Moving to archive folder the Venn diagrams plots generated for Indels, Snvs and Indels+Snvs
    # The common prefix for the Venn folders is: SummaryPlots_ ; do not go beyond as the number represents
    # the number of tools used to call variants and may change from one project to another
    #}
    rm -rf {{ temp_dir }}/SummaryPlots_*/sets
    mv {{ temp_dir }}/SummaryPlots_* "{{ results_dir }}"

{{- annotate_vcfs(sample_or_pair, temp_dir, results_dir, merged_vcf_gz, aligner, 'merged') }}

{% endmacro %}
