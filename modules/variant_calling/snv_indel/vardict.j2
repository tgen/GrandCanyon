{% macro vardict(sample_or_pair, aligner='bwa') %}

{% if sample_or_pair.normal is defined %}
  {%- set normal_bam %}temp/{{ sample_or_pair.gltype }}/alignment/{{ aligner }}/{{ sample_or_pair.normal.name }}/{{ sample_or_pair.normal.name }}.{{ aligner }}.bam{% endset %}
  {%- set tumor_bam %}temp/{{ sample_or_pair.gltype }}/alignment/{{ aligner }}/{{ sample_or_pair.tumor.name }}/{{ sample_or_pair.tumor.name }}.{{ aligner }}.bam{% endset %}
  {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/somatic_variant_calls/vardict/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
  {%- set results_dir %}{{ sample_or_pair.gltype }}/somatic_variant_calls/vardict/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
  {%- set input_config = "paired" %}
{% else %}
  {%- set bam %}temp/{{ sample_or_pair.gltype }}/alignment/{{ aligner }}/{{ sample_or_pair.name }}/{{ sample_or_pair.name }}.{{ aligner }}.bam{% endset %}
  {% if sample_or_pair.subGroup|lower in ('tumor','tumour','case') %}
    {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/somatic_variant_calls/vardict/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set results_dir %}{{ sample_or_pair.gltype }}/somatic_variant_calls/vardict/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set input_config = "tumor_only" %}
  {% else %}
    {%- set temp_dir %}temp/{{ sample_or_pair.gltype }}/constitutional_variant_calls/vardict/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set results_dir %}{{ sample_or_pair.gltype }}/constitutional_variant_calls/vardict/{{ sample_or_pair.name }}_{{ aligner }}{% endset %}
    {%- set input_config = "germline" %}
  {% endif %}
{% endif %}
{% set all_vcf %}{{ results_dir }}/{{ sample_or_pair.name }}.{{ aligner }}.vardict.all.vcf.gz{% endset %}
{% set pass_vcf %}{{ results_dir }}/{{ sample_or_pair.name }}.{{ aligner }}.vardict.pass.vcf.gz{% endset %}

{% for chunk in range(1, num_chunks+1) %}
- name: vardict_makewindows_{{ sample_or_pair.name }}_{{ aligner }}_{{ chunk }}
  tags: [{{ sample_or_pair.gltype }}, snp_indel_caller, VarDict, {{ sample_or_pair.name }}]
  input: temp/pipeline_resources/calling_intervals/calling_interval_{{ chunk }}.bed
  output: {{ temp_dir }}/{{ chunk }}.bed
  cpus: 1
  mem: 2G
  walltime: "1:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bedtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ temp_dir }}"

    bedtools makewindows \
      -w 20000 -s 19850 \
      -b temp/pipeline_resources/calling_intervals/calling_interval_{{ chunk }}.bed \
      > "{{ temp_dir }}/{{ chunk }}.bed"

- name: vardict_{{ sample_or_pair.name }}_{{ aligner }}_{{ chunk }}
  tags: [{{ sample_or_pair.gltype }}, snp_indel_caller, VarDict, {{ sample_or_pair.name }}]
  input:
    {% if input_config in ('paired') %}
    - {{ normal_bam }}
    - {{ normal_bam }}.bai
    - {{ tumor_bam }}
    - {{ tumor_bam }}.bai
    {% else %}
    - {{ bam }}
    - {{ bam }}.bai
    {% endif %}
    - {{ temp_dir }}/{{ chunk }}.bed
    - {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    - {{ temp_dir }}/{{ chunk }}.vardict.vcf
  cpus: 4
  mem: 32G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.vardict.container }}
  digest: {{ constants.tools.vardict.digest }}
  cmd: |
    set -eu
    set -o pipefail

    JAVA_OPTS="-Xmx26g" vardict-java \
      -th 4 \
      {% if input_config in ('paired') %}
      -b "{{ tumor_bam }}|{{ normal_bam }}" \
      -N "{{ sample_or_pair.tumor.rgsm }}" \
      {% else %}
      -b "{{ bam }}" \
      -N "{{ sample_or_pair.rgsm }}" \
      {% endif %}
      -G "{{ constants.grandcanyon[reference].reference_fasta }}" \
      -Q 1 \
      -q 20 \
      --dedup \
      --nosv \
      -UN \
      -c 1 -S 2 -E 3 \
      "{{ temp_dir }}/{{ chunk }}.bed" \
    {% if input_config in ('paired') %}
    | testsomatic.R \
    | var2vcf_paired.pl \
      -N "{{ sample_or_pair.tumor.rgsm }}|{{ sample_or_pair.normal.rgsm }}" \
    {% else %}
    | teststrandbias.R \
    | var2vcf_valid.pl \
      -N "{{ sample_or_pair.rgsm }}" \
    {% endif %}
      -Q 1 \
      -q 22.5 \
    > {{ temp_dir }}/{{ chunk }}.vardict.vcf

{% endfor %}

- name: vardict_merge_chunks_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, VarDict, {{ sample_or_pair.name }}]
  reset: predecessors
  input:
    {% for chunk in range(1, num_chunks+1) %}
    - {{ temp_dir }}/{{ chunk }}.vardict.vcf
    {% endfor %}
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
  cpus: 1
  mem: 4G
  walltime: "12:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ results_dir }}"

    bcftools concat \
      --allow-overlaps \
      --output-type z \
      --output "{{ all_vcf }}" \
      --write-index \
      "{{ temp_dir }}/*.vardict.vcf.gz"

- name: vardict_filter_variants_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.gltype }}, somatic, snp_indel_caller, VarDict, {{ sample_or_pair.name }}]
  input:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
  output:
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpus: 1
  mem: 4G
  walltime: "12:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS" & INFO/STATUS == "StrongSomatic"' \
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"

    bcftools index --tbi --force "{{ pass_vcf }}"

{% endmacro %}
