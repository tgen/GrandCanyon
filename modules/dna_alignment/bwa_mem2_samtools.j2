# This alignment command prefix is shared by all modules using bwa
{% from 'utilities/read_group_line.j2' import read_group_line with context %}
{% from 'utilities/remove_files.j2' import remove_files with context %}

{% macro bwa_mem2_samtools(sample, opt_dup_distance, aligner) %}

{% set temp_dir %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}{% endset %}

{% for rgid, rg in sample.read_groups.items() %}
{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}

- name: chunked_bwa_mem_generate_chunks_{{ sample.name }}_{{ aligner }}_{{ rgid }}
  reset: predecessors
  input:
    - temp/fastqs/{{ r1fastq.basename }}
    - temp/fastqs/{{ r2fastq.basename }}
  output: temp/fastqs/{{ sample.name }}/{{ rgid }}
  walltime: "24:00:00"
  cpus: 20
  mem: 80G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.seqkit.container }}
  cmd: |
    set -eu

    mkdir -p temp/fastqs/{{ sample.name }}/{{ rgid }}

    seqkit split2 \
      --by-size 48000000 \
      --force \
      --extension ".gz" \
      --out-dir temp/fastqs/{{ sample.name }}/{{ rgid }} \
      --read1 temp/fastqs/{{ r1fastq.basename }} \
      --read2 temp/fastqs/{{ r2fastq.basename }}


- name: chunked_bwa_mem_generate_chunked_tasks_{{ sample.name }}_{{ aligner }}_{{ rgid }}
  reset: predecessors
  after: chunked_bwa_mem_generate_chunks_{{ sample.name }}_{{ aligner }}_{{ rgid }}
  exec: |
    import glob

    fastq_list = glob.glob("temp/fastqs/{{ sample.name }}/{{ rgid }}/*part*fastq.gz")
    num_chunks = int(len(fastq_list)/2)
    for index in range(1, num_chunks+1):
      chunk = f'{index:03d}'
      if self.workflow.tasks.get(f'chunked_bwa_mem_samtools_fixmate_{{ sample.name }}_{{ aligner }}_{{ rgid }}_{chunk}'):
        self.workflow.tasks.pop(f'chunked_bwa_mem_samtools_fixmate_{{ sample.name }}_{{ aligner }}_{{ rgid }}_{chunk}')
      self.workflow.new_task(
          name = f'chunked_bwa_mem_samtools_fixmate_{{ sample.name }}_{{ aligner }}_{{ rgid }}_{chunk}',
          reset = "predecessors",
          input = ['temp/fastqs/{{ sample.name }}/{{ rgid }}', '{{ constants.grandcanyon[reference].bwa_mem2_index }}'],
          output = "{{ temp_dir }}/{{ rgid }}/{chunk}.{{ aligner }}.bam",
          walltime = "8:00:00",
          cpus = "20",
          mem = "80G",
          queue_preset = "DEFAULT",
          container = "{{ constants.tools.bwa_mem2_samtools.container }}",
          digest = "{{ constants.tools.bwa_mem2_samtools.digest }}",
          cmd = f"""
            set -eu
            set -o pipefail

            {#
            # If this task was interrupted previously, temp files may exist
            # that will cause errors with samtools sort. Here, we purge any
            # existing temp files before making the directory again.
            #}
            rm -r {{ temp_dir }}/{{ rgid }}/{chunk}_st_sort_temp || true
            mkdir -p {{ temp_dir }}/{{ rgid }}/{chunk}_st_sort_temp

            {# No long options available for the following:
             bwa mem
                -v INT       Verbosity: 3 = message (default = 3)
                -Y           Use soft clipping for supplementary alignments
                -K INT       Process INT input bases in each batch regardless of nThreads (for reproducibility)
                -t INT       Number of threads to use
                -R STR       Read group header line such as '@RG\tID:foo\tSM:bar' [null]

             samtools fixmate
                -m           Add mate score tag, REQUIRED for samtools markdup
                -            Input from stdin
                -            Output to stdout

             samtools sort
                -l INT       Set compression level, from 0 (uncompressed) to 9 (best)
                -m INT       Set maximum memory per thread; suffix K/M/G recognized [768M]
                -T PREFIX    Write temporary files to PREFIX.nnnn.bam
                -            Input from stdin
                -o FILE      Write final output to FILE rather than standard output
            #}
            bwa-mem2 mem \
              -v 3 \
              -Y \
              -K 100000000 \
              -t 19 \
              -R '{{ read_group_line(rg, format="exec_bwa") }}' \
              {{ constants.grandcanyon[reference].bwa_mem2_index }} \
              temp/fastqs/{{ sample.name }}/{{ rgid }}/{{ r1fastq.basename.split('.fastq.gz')[0] }}.part_{chunk}.fastq.gz \
              temp/fastqs/{{ sample.name }}/{{ rgid }}/{{ r2fastq.basename.split('.fastq.gz')[0] }}.part_{chunk}.fastq.gz |\
            samtools fixmate \
              --threads 19 \
              -m \
              - \
              - |\
            samtools sort \
              -T {{ temp_dir }}/{{ rgid }}/{chunk}_st_sort_temp/{chunk} \
              -u \
              -m 3G \
              --threads 19 \
              --output-fmt BAM \
              -o {{ temp_dir }}/{{ rgid }}/{chunk}.{{ aligner }}.bam \
              -
          """
      )

{% endfor %}


{% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
- name: chunked_samtools_merge_rgid_bams_{{ sample.name }}_{{ rglb }}_{{ aligner }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  reset: predecessors
  after-re:
  {% for rgid in rg %}
    - chunked_bwa_mem_generate_chunked_tasks_{{ sample.name }}_{{ aligner }}_{{ rgid.rgid }}
    - chunked_bwa_mem_samtools_fixmate_{{ sample.name }}_{{ aligner }}_{{ rgid.rgid }}_.*
  {% endfor %}
  input-re: 
  {% for rgid in rg %}
    - {{ temp_dir }}/{{ rgid.rgid }}/.*.{{ aligner }}.bam
  {% endfor %}
  output: {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam
  walltime: "24:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    {# No long options available for the following:
      -c           Combine @RG headers with colliding IDs [alter IDs to be distinct]
      -f           Overwrite the output BAM if exist
      -l INT       Compression level, from 0 to 9 [-1]
    #}
    samtools merge \
      --threads 4 \
      -c \
      -f \
      -u \
      {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam \
      {% for rgid in rg %}
      {% if not loop.last %}
      {{ temp_dir }}/{{ rgid.rgid }}/*.{{ aligner }}.bam \
      {% else %}
      {{ temp_dir }}/{{ rgid.rgid }}/*.{{ aligner }}.bam
      {% endif %}
      {% endfor %}


- name: samtools_markdup_{{ sample.name }}_{{ rglb }}_{{ aligner }}
  tags: [{{ sample.gltype }}, alignment, mark_duplicates, samtools, {{ sample.name }}]
  reset: predecessors
  methods: Duplicate reads for {{ sample.name }} were marked with samtools markdup.
  input:
    - {{ constants.grandcanyon[reference].reference_fasta }}
    - {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam
  output:
    {% if sample.read_groups.values() | groupby('rglb') | length == 1 %}
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.cram
    {% else %}
    - {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.cram
    {% endif %}
    - {{ results_dir }}/stats/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam.samtools.markdup.json
  walltime: "96:00:00"
  cpus: 4
  mem: 64G
  queue_preset: "DEFAULT-LONG"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    {#
    # If this task was interrupted previously, temp files may exist
    # that will cause errors with samtools markdup. Here, we purge any
    # existing temp files before making the directory again.
    #}
    rm -r "{{ temp_dir }}/markdup_temp/{{ sample.name }}_{{ rglb }}" || true
    mkdir -p "{{ temp_dir }}/markdup_temp/{{ sample.name }}_{{ rglb }}"
    mkdir -p "{{ results_dir }}/stats/"

    {#
    # Choose an optical distance based on sequencer
    #}

    {# No long options available for the following:
     -d      Optical distance
     -S      Mark supplemenary alignments of duplicates as duplicates (slower)
     -f      Write stats to named file. Implies -s (report stats)
     -T      PREFIX    Write temporary files to PREFIX.samtools.nnnn.nnnn.tmp
     2>      Stats are output to stderr which is redirected to ".{{ aligner }}.bam.markdup.txt"
    #}
    samtools markdup \
      {% if sample.pcrCycles is defined and sample.pcrCycles == 0 %}
      --use-read-groups \
      {% endif %}
      --json \
      -d {{ opt_dup_distance }} \
      -S \
      -f {{ results_dir }}/stats/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam.samtools.markdup.json \
      --threads 4 \
      --write-index \
      --output-fmt CRAM \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      -T {{ temp_dir }}/markdup_temp/{{ sample.name }}_{{ rglb }} \
      {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam \
      {% if sample.read_groups.values() | groupby('rglb') | length == 1 %}
      {{ results_dir }}/{{ sample.name }}.{{ aligner }}.cram
      {% else %}
      {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.cram
      {% endif %}

{% endfor %}

{% if sample.read_groups.values() | groupby('rglb') | length > 1 %}
- name: chunked_samtools_merge_rglb_bams_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  reset: predecessors
  input: 
    - {{ constants.grandcanyon[reference].reference_fasta }}
  {% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
    - {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.cram
  {% endfor %}
  output: {{ results_dir }}/{{ sample.name }}.{{ aligner }}.cram
  walltime: "24:00:00"
  cpus: 4
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    {# No long options available for the following:
      -c           Combine @RG headers with colliding IDs [alter IDs to be distinct]
      -f           Overwrite the output BAM if exist
    #}
    samtools merge \
      --threads 4 \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      -c \
      -f \
      --write-index \
      {{ results_dir }}/{{ sample.name }}.{{ aligner }}.cram \
      {% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
      {% if not loop.last %}
      {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.cram \
      {% else %}
      {{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.cram
      {% endif %}
      {% endfor %}

{% endif %}

- name: bwa_mem2_samtools_create_temp_bam_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  input:
    - {{ constants.grandcanyon[reference].reference_fasta }}
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.cram
  output:
    - {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.bam
    - {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.bam.bai
  walltime: "4:00:00"
  cpus: 8
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  cmd: |

    samtools view \
      -@ 8 \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      --no-PG \
      -o {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.bam \
      --write-index \
      {{ results_dir }}/{{ sample.name }}.{{ aligner }}.cram


{% endmacro %}
