{% macro minimap2(sample) %}

{% for rgid, rg in sample.read_groups.items() %}
{% set ubam = rg.ubam_files|first %}

{#
# Create fastq from PacBio uBAM, pipe directly to minimap and convert to bam via samtools collate to prep for zipperBam
# Need to review the PacBio settings particulary -Y
# I got an error with the first attempt where the sort order is not matching for the uBAM and aligned BAM
# I suspect the minimap batch of threads outputs in an order that doesn't match the uBAM so after alignment added collate for rapid sort

## Preset Information
# minimap2 - map-hifi	Align PacBio high-fidelity (HiFi) reads to a reference genome
# -k19 -w19 -U50,500 -g10k -A1 -B4 -O6,26 -E2,1 -s200

## Minimap options added
# -a	Generate CIGAR and output alignments in the SAM format. Minimap2 outputs in PAF by default.
# -Y	In SAM output, use soft clipping for supplementary alignments.
# -L	Write CIGAR with >65535 operators at the CG tag. Older tools are unable to convert alignments with >65535 CIGAR ops to BAM. This option makes minimap2 SAM compatible with older tools. Newer tools recognizes this tag and reconstruct the real CIGAR in memory.

## Minimap2 variables altered by map-hifi preset
# -k INT	Minimizer k-mer length [15]
# -w INT	Minimizer window size [2/3 of k-mer length]. A minimizer is the smallest k-mer in a window of w consecutive k-mers.
# -U INT1[,INT2] Lower and upper bounds of k-mer occurrences [10,1000000]. The final k-mer occurrence threshold is max{INT1, min{INT2, -f}}. This option prevents excessively small or large -f estimated from the input reference. Available since r1034 and deprecating --min-occ-floor in earlier versions of minimap2.
# -g NUM	Stop chain enlongation if there are no minimizers within NUM-bp [10k]
# -A INT	Matching score [2]
# -B INT	Mismatching penalty [4]
# -O INT1[,INT2] Gap open penalty [4,24]. If INT2 is not specified, it is set to INT1.
# -E INT1[,INT2] Gap extension penalty [2,1]. A gap of length k costs min{O1+k*E1,O2+k*E2}. In the splice mode, the second gap penalties are not used.
# -s INT	Minimal peak DP alignment score to output [40]. The peak score is computed from the final CIGAR. It is the score of the max scoring segment in the alignment and may be different from the total alignment score.
#}

{% set temp_dir %}temp/{{ sample.gltype }}/alignment/{{ sample.name }}{% endset %}

{% for rgid, rg in sample.read_groups.items() %}

{% for ubam in rg.ubam_files %}
- name: minimap2_{{ sample.name }}_{{ ubam.rgid }}
  input: temp/ubams/{{ ubam.basename }}
  output: {{ sample.gltype }}/alignment/{{ sample.name }}_{{ rgid }}.bam
  cpus: 20
  mem: 60G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2_samtools.container }}
  cmd: |
    samtools fastq \
      --threads 10 \
      temp/ubams/{{ ubam.basename }} |\
    minimap2 \
      -t 30 \
      -x map-hifi \
      -a \
      -Y \
      -L \
      {{ constants.grandcanyon.minimap2_map_hifi_mmi }} \
      /dev/stdin |\
    samtools collate \
      --threads 10 \
      --no-PG \
      -o temp/{{ sample.gltype }}/alignment/{{ sample.name }}_{{ rgid }}.bam \
      --output-fmt BAM \
      -

- name: zipper_bam_{{ sample.name }}_{{ ubam.rgid }}
  input: temp/{{ sample.gltype }}/alignment/{{ sample.name }}_{{ rgid }}.bam
  output: {{ sample.gltype }}/alignment/{{ sample.name }}_{{ rgid }}.bam
  cpus: 20
  mem: 20G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.fgbio_samtools.container }}
  cmd: |

    fgbio --tmp-dir ${TEMP} --compression 1 --async-io=true ZipperBams \
      --input=temp/{{ sample.gltype }}/alignment/{{ sample.name }}_{{ rgid }}.bam \
      --unmapped=temp/ubams/{{ ubam.basename }} \
      --ref={{ constants.grandcanyon.reference_fasta }} |\
    samtools sort \
      --threads 20 \
      --reference {{ constants.grandcanyon.reference_fasta }} \
      -o {{ sample.gltype }}/alignment/{{ sample.name }}_{{ rgid }}.cram \
      --output-fmt CRAM \
      --write-index \
      -

{% endfor %}
{% endfor %}

{% endmacro %}
