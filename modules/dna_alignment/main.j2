{% from 'modules/dna_alignment/minimap2.j2' import minimap2 with context %}
{% from 'modules/dna_alignment/minimap2_sr.j2' import minimap2_sr with context %}
{% from 'modules/dna_alignment/bwa_mem2_samtools.j2' import bwa_mem2_samtools with context %}
{% from 'modules/qc/main.j2' import bam_qc with context %}
{% from 'utilities/remove_files.j2' import remove_files with context %}

{% macro dna_alignment(samples) %}

  {% for sample in samples.values() if sample.gltype in ['genome', 'exome'] and sample.glprep not in ['longread'] %}
    {% set task_list = [] %}
    {% set files_to_remove = [] %}
    {% set platform = (sample.read_groups.values()|first).rgpm|default('') %}
    {% if platform|lower in ['hiseq4000', 'novaseq6000', 'novaseqxplus'] %}
      {% set opt_dup_distance = 2500 %}
    {% else %}
      {% set opt_dup_distance = 100 %}
    {% endif %}

    {# In main we check the following (commenting here for visibility):
    {% if sample.gltype in ['genome', 'exome'] and sample.glprep not in ['longread'] %}
        {% if tasks[sample.gltype|capitalize+"_alignment_dna_alignment_bwa"]|default(false) %}
            {% do sample.aligners.append('bwa') %}
        {% endif %}
        {% if tasks[sample.gltype|capitalize+"_alignment_dna_alignment_minimap2_sr"]|default(false) %}
            {% do sample.aligners.append('minimap2') %}
        {% endif %}
    {% endif %}
    #}
    {% if 'bwa' in sample.aligners %}
      {% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
      {% set task %}chunked_samtools_merge_rgid_bams_{{ sample.name }}_{{ rglb }}_bwa{% endset %}
      {% do task_list.append(task) %}
      {% endfor %}
      {{- bwa_mem2_samtools(sample, opt_dup_distance, aligner='bwa') }}
      {{- bam_qc(sample, aligner='bwa') }}
      {% set aligner = 'bwa' %}
      {% set temp_dir %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}{% endset %}
      {% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
        {% set file %}{{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam{% endset %}
        {% do files_to_remove.append(file) %}
        {% if sample.read_groups.values() | groupby('rglb') | length > 1 %}
          {% set file %}{{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.cram{% endset %}
          {% do files_to_remove.append(file) %}
          {% set task %}chunked_samtools_merge_rglb_bams_{{ sample.name }}_{{ aligner }}{% endset %}
          {% do task_list.append(task) %}
        {% else %}
          {% set task %}samtools_markdup_{{ sample.name }}_{{ rglb }}_{{ aligner }}{% endset %}
          {% do task_list.append(task) %}
        {% endif %}
      {% endfor %}
    {% endif %}
    {% if 'minimap2' in sample.aligners %}
      {{- minimap2_sr(sample, opt_dup_distance, aligner='minimap2') }}
      {{- bam_qc(sample, aligner='minimap2') }}
      {% set aligner = 'minimap2' %}
      {% set temp_dir %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}{% endset %}
      {% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
        {% set file %}{{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.bam{% endset %}
        {% do files_to_remove.append(file) %}
        {% for rgid in rg %}
          {% set file %}{{ temp_dir }}/{{ rgid.rgid }}{% endset %}
          {% do files_to_remove.append(file) %}
        {% endfor %}
        {% if sample.read_groups.values() | groupby('rglb') | length > 1 %}
          {% set file %}{{ temp_dir }}/{{ sample.name }}_{{ rglb }}.{{ aligner }}.md.cram{% endset %}
          {% do files_to_remove.append(file) %}
          {% set task %}chunked_samtools_merge_rglb_bams_{{ sample.name }}_{{ aligner }}{% endset %}
          {% do task_list.append(task) %}
        {% else %}
          {% set task %}samtools_markdup_{{ sample.name }}_{{ rglb }}_{{ aligner }}{% endset %}
          {% do task_list.append(task) %}
        {% endif %}
      {% endfor %}
    {% endif %}

    {% for rgid, rg in sample.read_groups.items() %}
      {% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
      {% do r1fastq.update({"path": "temp/fastqs/" + r1fastq.basename}) %}
      {% do files_to_remove.append(r1fastq.path) %}

      {% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}
      {% do r2fastq.update({"path": "temp/fastqs/" + r2fastq.basename}) %}
      {% do files_to_remove.append(r2fastq.path) %}

      {% set file %}temp/fastqs/{{ sample.name }}/{{ rgid }}{% endset %}
      {% do files_to_remove.append(file) %}
    {% endfor %}

    {% set task_name %}{{ sample.name }}_dna_fastqs{% endset %}
    {{- remove_files(none, task_list, files_to_remove, task_name) }}
  {% endfor %}

  {% for sample in samples.values() if sample.gltype in ['genome', 'exome'] and sample.glprep in ['longread'] %}
    {% if tasks[sample.gltype|capitalize+"_alignment_dna_alignment_minimap2"]|default(false) %}
      {{- minimap2(sample) }}
      {{- bam_qc(sample, aligner='minimap2')}}
    {% endif %}
  {% endfor %}

{% endmacro %}

