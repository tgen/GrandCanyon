{% from 'modules/dna_alignment/minimap2.j2' import minimap2 with context %}
{% from 'modules/dna_alignment/minimap2_sr.j2' import minimap2_sr with context %}
{% from 'modules/dna_alignment/bwa_mem2_samtools.j2' import bwa_mem2_samtools with context %}
{% from 'modules/qc/main.j2' import bam_qc with context %}
{% from 'utilities/remove_files.j2' import remove_files with context %}

{% macro dna_alignment(samples) %}

  {% for sample in samples.values() if sample.gltype in ['genome', 'exome'] and sample.glprep not in ['longread'] %}
    {% set task_list = [] %}
    {% set platform = (sample.read_groups.values()|first).rgpm|default('') %}
    {% if platform|lower in ['hiseq4000', 'novaseq6000', 'novaseqxplus'] %}
      {% set opt_dup_distance = 2500 %}
    {% else %}
      {% set opt_dup_distance = 100 %}
    {% endif %}

    {# In main we check the following (commenting here for visibility):
    {% if sample.gltype in ['genome', 'exome'] and sample.glprep not in ['longread'] %}
        {% if tasks[sample.gltype|capitalize+"_alignment_dna_alignment_bwa"]|default(false) %}
            {% do sample.aligners.append('bwa') %}
        {% endif %}
        {% if tasks[sample.gltype|capitalize+"_alignment_dna_alignment_minimap2_sr"]|default(false) %}
            {% do sample.aligners.append('minimap2') %}
        {% endif %}
    {% endif %}
    #}
    {% if 'bwa' in sample.aligners %}
      {% for rglb, rg in sample.read_groups.values() | groupby('rglb') %}
      {% set task %}chunked_samtools_merge_rgid_bams_{{ sample.name }}_{{ rglb }}_bwa{% endset %}
      {% do task_list.append(task) %}
      {% endfor %}
      {{- bwa_mem2_samtools(sample, opt_dup_distance, aligner='bwa') }}
      {{- bam_qc(sample, aligner='bwa') }}
    {% endif %}
    {% if 'minimap2' in sample.aligners %}
      {% set task %}fq2bam_{{ sample.name }}_minimap2{% endset %}
      {% do task_list.append(task) %}
      {{- minimap2_sr(sample, opt_dup_distance, aligner='minimap2') }}
      {{- bam_qc(sample, aligner='minimap2') }}
    {% endif %}
  {% endfor %}

  {% for sample in samples.values() if sample.gltype in ['genome', 'exome'] and sample.glprep in ['longread'] %}
    {% if tasks[sample.gltype|capitalize+"_alignment_dna_alignment_minimap2"]|default(false) %}
      {{- minimap2(sample) }}
      {{- bam_qc(sample, aligner='minimap2')}}
    {% endif %}
  {% endfor %}

{% endmacro %}

