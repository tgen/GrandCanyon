{% macro flair(sample, sample_bam, input_fq, reference_fasta, gtf, SIRV=false) %}

{% if SIRV %}
  {% set temp_dir %}temp/{{ sample.gltype }}/quant/flair_SIRV/{{ sample.name }}{% endset %}
  {% set results_dir %}{{ sample.gltype }}/quant/flair_SIRV/{{ sample.name }}{% endset %}
{% else %}
  {% set temp_dir %}temp/{{ sample.gltype }}/quant/flair/{{ sample.name }}{% endset %}
  {% set results_dir %}{{ sample.gltype }}/quant/flair/{{ sample.name }}{% endset %}
{% endif %}

{% if SIRV %}
- name: flair_SIRV_{{ sample.name }}
{% else %}
- name: flair_{{ sample.name }}
{% endif %}
  input:
    - {{ reference_fasta }}
    - {{ gtf }}
    - {{ sample_bam }}
    - {{ input_fq }}
  output:
    - {{ temp_dir }}/flair.collapse.isoforms.fa
    - {{ results_dir }}/{{ sample.name }}.quantify.isoforms.fa
    - {{ results_dir }}/{{ sample.name }}.quantify.tpm.tsv
    - {{ results_dir }}/{{ sample.name }}_flair_top10.txt
  cpus: 10
  mem: 32G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.flair.container }}
  cmd: |
    set -e

    mkdir -p {{ temp_dir }}
    mkdir -p {{ results_dir }}

    {# we already did alignment, skipping flair align step and converting bam to bed for flair correct #}
    bam2Bed12 \
      -i {{ sample_bam }} \
      > {{ temp_dir }}/flair.aligned.bed
    flair correct \
      --threads 10 \
      --query {{ temp_dir }}/flair.aligned.bed \
      --genome {{ reference_fasta }} \
      --gtf {{ gtf }} \
      --output {{ temp_dir }}/{{ sample.name }}
    flair collapse \
      --threads 10 \
      --query {{ temp_dir }}/{{ sample.name }}_all_corrected.bed \
      --genome {{ reference_fasta }} \
      --reads {{ input_fq }} \
      {% if not SIRV %}
      --gtf {{ gtf }} \
      {% endif %}
      --output {{ temp_dir }}/{{ sample.name }}.collapse

    {# generate reads_manifest.tsv file for flair quantify #}
    printf "{{ sample.name }}\tcondition1\tbatch1\t{{ input_fq }}\n" > {{ temp_dir }}/{{ sample.name }}.reads_manifest.tsv

    flair quantify \
      --threads 10 \
      --temp_dir {{ temp_dir }} \
      --reads_manifest {{ temp_dir }}/{{ sample.name }}.reads_manifest.tsv \
      --sample_id_only \
      --isoforms {{ temp_dir }}/{{ sample.name }}.collapse.isoforms.fa \
      --output {{ results_dir }}/{{ sample.name }}.quantify
    flair quantify \
      --threads 10 \
      --temp_dir {{ temp_dir }} \
      --reads_manifest {{ temp_dir }}/{{ sample.name }}.reads_manifest.tsv \
      --sample_id_only \
      --isoforms {{ temp_dir }}/{{ sample.name }}.collapse.isoforms.fa \
      --tpm \
      --output {{ results_dir }}/{{ sample.name }}.quantify

    {# generate file with the 10 longest isoforms #}
    awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' {{ results_dir }}/{{ sample.name }}.quantify.isoforms.fa |\
    awk '{printf("%d\t%s\t%s\t%s\n",length($2),$1,$1,$2);}' |\
    sort -t $'\t' -k1,1nr | cut -f 1,2 | head > {{ results_dir }}/{{ sample.name }}_flair_top10.txt

{% endmacro %}

