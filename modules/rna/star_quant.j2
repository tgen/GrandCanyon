{% from 'utilities/read_group_line.j2' import read_group_line %}
{% from 'modules/qc/stats2json.j2' import stats2json with context %}

# Run STAR RNA Alignment for quantification
{% macro star_quant(sample, opt_dup_distance) %}
{% set sjdb_overhang %}{{ sample.read1Length - 1|default(99, true) }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/alignment/star/{{ sample.name }}{% endset %}
{% set star_finalcountsdir %}{{ sample.gltype }}/quant/star/{{ sample.name }}{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/quant/star/{{ sample.name }}{% endset %}
{% set star_bam_unsort %}{{ temp_dir }}/{{ sample.name }}.Aligned.out.bam{% endset %}
{% set star_bam_sorted %}{{ temp_dir }}/{{ sample.name }}.Aligned.sorted.bam{% endset %}
{% set star_bam_md %}{{ temp_dir }}/{{ sample.name }}.md.bam{% endset %}
{% set star_bam_final %}{{ results_dir }}/{{ sample.name }}.star.bam{% endset %}

{# Here we build up lists of all the fastq files and rg lines for this sample #}
{% set r1fqlist = [] %}
{% set r2fqlist = [] %}
{% set rglinelist = [] %}

{% for rgid, rg in sample.read_groups.items() %}
  {% if rg.data_files|length < 2 %}
      {{ raise('Read group did not have 2 data files: {}'.format(rgid)) }}
  {% endif %}
  {% do rglinelist.append(read_group_line(rg, format='star')) %}

  {% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
  {% do r1fastq.update({"path": "temp/fastqs/" + r1fastq.basename}) %}
  {% do r1fqlist.append(r1fastq) %}

  {% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}
  {% do r2fastq.update({"path": "temp/fastqs/" + r2fastq.basename}) %}
  {% do r2fqlist.append(r2fastq) %}
{% endfor %}

- name: star_quant_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, rna_alignment, STAR, {{ sample.name }}]
  reset: predecessors
  input:
    {% for fq in r1fqlist %}
    - {{ fq.path }}
    {% endfor %}
    {% for fq in r2fqlist %}
    - {{ fq.path }}
    {% endfor %}
    {% if constants.grandcanyon[reference].star_fasta is defined %}
    - {{ constants.grandcanyon[reference].star_fasta }}
    {% else %}
    - {{ constants.grandcanyon[reference].reference_fasta }}
    {% endif %}
    - {{ constants.grandcanyon[reference].gtf }}
  output:
    - {{ star_bam_unsort }}
    - {{ star_finalcountsdir }}/{{ sample.name }}.ReadsPerGene.out.tab
    - {{ star_finalcountsdir }}/{{ sample.name }}.star.junctions
    - {{ results_dir }}/stats/{{ sample.name }}_star.Log.final.out
  cpus: 20
  mem: 80G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.star_fusion.container }}
  digest: {{ constants.tools.star_fusion.digest }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p "{{ temp_dir }}"
    mkdir -p "{{ results_dir }}/stats"
    mkdir -p "{{ star_finalcountsdir }}"

    ROOT_DIR=${PWD}
    mkdir -p {{ temp_dir }}/star_index
    cd {{ temp_dir }}/star_index

    STAR \
      --runMode genomeGenerate \
      --genomeDir ../star_index \
      --runThreadN 19 \
      --sjdbOverhang {{ sjdb_overhang }} \
      {% if constants.grandcanyon[reference].star_fasta is defined %}
      --genomeFastaFiles {{ constants.grandcanyon[reference].star_fasta }} \
      {% else %}
      --genomeFastaFiles {{ constants.grandcanyon[reference].reference_fasta }} \
      {% endif %}
      --sjdbGTFfile {{ constants.grandcanyon[reference].gtf }}

    STAR_INDEX=${ROOT_DIR}/{{ temp_dir }}/star_index

    cd ${ROOT_DIR}

    STAR \
      --runMode alignReads \
      --twopassMode Basic \
      --runThreadN 19 \
      --genomeLoad NoSharedMemory \
      --readFilesType Fastx \
      --readFilesCommand zcat \
      --limitOutSAMoneReadBytes 90000000 \
      --outSAMtype BAM Unsorted \
      --outSAMmode Full \
      --outSAMstrandField intronMotif \
      --outSAMunmapped Within \
      --outSAMmapqUnique 255 \
      --outFilterType BySJout \
      --outFilterMultimapNmax 20 \
      --outFilterMismatchNmax 999 \
      --outFilterMismatchNoverReadLmax 0.04 \
      --alignIntronMin 20 \
      --alignIntronMax 1000000 \
      --alignMatesGapMax 1000000 \
      --alignSJoverhangMin 8 \
      --alignSJDBoverhangMin 1 \
      --peOverlapNbasesMin 12 \
      --peOverlapMMp 0.1 \
      --chimOutType WithinBAM SoftClip \
      --chimSegmentMin 12 \
      --chimJunctionOverhangMin 12 \
      --chimSegmentReadGapMax 3 \
      --chimMultimapNmax 0 \
      --chimMultimapScoreRange 10 \
      --chimNonchimScoreDropMin 10 \
      --chimOutJunctionFormat 1 \
      --quantMode GeneCounts \
      --outSAMattrRGline {{ rglinelist|join(' , ') }} \
      --sjdbOverhang "{{ sjdb_overhang }}" \
      --genomeDir ${STAR_INDEX} \
      --readFilesIn "{{ r1fqlist|map(attribute='path')|join(',') }}" "{{ r2fqlist|map(attribute='path')|join(',') }}" \
      --outFileNamePrefix "{{ temp_dir }}/{{ sample.name }}."

    mv {{ temp_dir }}/{{ sample.name }}.ReadsPerGene.out.tab {{ star_finalcountsdir }}/
    mv {{ temp_dir }}/{{ sample.name }}.SJ.out.tab {{ star_finalcountsdir }}/{{ sample.name }}.star.junctions
    mv {{ temp_dir }}/{{ sample.name }}.Log.final.out {{ results_dir }}/stats/{{ sample.name }}_star.Log.final.out


- name: fixmate_sort_star_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, rna_alignment, STAR, {{ sample.name }}]
  reset: predecessors
  input: {{ star_bam_unsort }}
  output: {{ star_bam_sorted }}
  cpus: 8
  mem: 16G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    rm -r "{{ temp_dir }}/sort" || true
    mkdir -p "{{ temp_dir }}/sort"

    samtools fixmate \
      --threads 8 \
      -m \
      "{{ star_bam_unsort }}" \
      - |\
    samtools sort \
      -l 5 \
      -m 1G \
      --threads 8 \
      -T "{{ temp_dir }}/sort" \
      - \
      -o "{{ star_bam_sorted }}"


{% set task %}{{ sample.name }}_star{% endset %}
{% set rna_md_metrics %}{{ results_dir }}/stats/{{ sample.name }}.star.bam.md_metrics{% endset %}
{% set rna_md_metrics_json %}{{ rna_md_metrics }}.json{% endset %}
- name: markduplicates_star_gatk_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, rna_alignment, STAR, {{ sample.name }}]
  reset: predecessors
  input: {{ star_bam_sorted }}
  output:
    - {{ star_bam_final }}
    - {{ rna_md_metrics }}
  cpus: 10
  mem: 40G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -eu
    set -o pipefail

    rm -r "{{ temp_dir }}/markdup" || true
    mkdir -p "{{ temp_dir }}/markdup"

    gatk MarkDuplicates \
      --java-options "-Xmx31G" \
      --TMP_DIR "temp" \
      --ASSUME_SORT_ORDER queryname \
      --CLEAR_DT false \
      --ADD_PG_TAG_TO_READS false \
      --OPTICAL_DUPLICATE_PIXEL_DISTANCE {{ opt_dup_distance }} \
      --INPUT "{{ star_bam_sorted }}" \
      --METRICS_FILE "{{ results_dir }}/stats/{{ sample.name }}.star.bam.md_metrics" \
      --OUTPUT "{{ star_bam_final }}"


- name: markduplicates_star_gatk_index_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, rna_alignment, STAR, {{ sample.name }}]
  reset: predecessors
  input: 
    - {{ star_bam_final }}
  output:
    - {{ star_bam_final }}.bai
  cpus: 10
  mem: 40G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    samtools index -@ 10 "{{ star_bam_final }}"

{{- stats2json(sample.gltype, sample.name, task, rna_md_metrics, rna_md_metrics_json, "picard_mark_duplicates_metrics", sample=sample, sample_name=sample.name) }}

{% endmacro %}
