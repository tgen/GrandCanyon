{% from 'modules/rna/pygmy_featureCounts.j2' import pygmy_featurecounts with context %}
{% from 'modules/rna/pygmy_flair.j2' import pygmy_flair with context %}
{% from 'modules/rna/pygmy_isoquant.j2' import pygmy_isoquant with context %}
{% from 'modules/rna/pygmy_salmon.j2' import pygmy_salmon with context %}

{% macro pygmy(sample) %}

{% set temp_dir %}temp/{{ sample.gltype }}/alignment/minimap2/{{ sample.name }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/alignment/minimap2/{{ sample.name }}{% endset %}

{% for rgid, rg in sample.read_groups.items() %}
{% for file in rg.data_files %}

{% set input_fastq %}temp/fastqs/{{ file.basename.split('.fastq.gz')[0] | replace(".", "_") }}.fastq.gz{% endset %}
{% set decompressed_fastq %}{{ temp_dir }}/pychopper/{{ sample.name }}/{{ file.basename.split('.fastq.gz')[0] | replace(".", "_") }}.fastq{% endset %}

- name: pychopper_{{ sample.name }}
  input: {{ input_fastq }}
  output: {{ temp_dir }}/pychopper/{{ sample.name }}/pychopper_all.fq
  cpus: 10
  mem: 32G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.pychopper.container }}
  cmd: |

    {# note: this step runs pychopper, which trims, orients, and rescues reads #}
    {# input: raw fastq #}
    {# output: pychopper chopped and rescued fastq #}

    mkdir -p {{ temp_dir }}/pychopper/{{ sample.name }}

    zcat {{ input_fastq }} > {{ decompressed_fastq }}

    cdna_classifier.py \
      -m edlib \
      -t 10 \
      -r {{ temp_dir }}/pychopper/{{ sample.name }}/report.pdf \
      -A {{ temp_dir }}/pychopper/{{ sample.name }}/aln_hits.bed \
      -S {{ temp_dir }}/pychopper/{{ sample.name }}/statistics.tsv \
      -u {{ temp_dir }}/pychopper/{{ sample.name }}/unclassified.fq \
      -w {{ temp_dir }}/pychopper/{{ sample.name }}/rescued.fq \
      {{ decompressed_fastq }} {{ temp_dir }}/pychopper/{{ sample.name }}/full_length_output.fq

    cat {{ temp_dir }}/pychopper/{{ sample.name }}/full_length_output.fq {{ temp_dir }}/pychopper/{{ sample.name }}/rescued.fq \
      > {{ temp_dir }}/pychopper/{{ sample.name }}/pychopper_all.fq


- name: minimap2_SIRV_{{ sample.name }}
  input:
    - {{ constants.grandcanyon.reference_fastaSIRV }}
    - {{ temp_dir }}/pychopper/{{ sample.name }}/pychopper_all.fq
  output:
    - {{ temp_dir }}/{{ sample.name }}_SIRVome_unmapped.fq
    - {{ results_dir }}/{{ sample.name }}_SIRVome_mapped.bam
    - {{ results_dir }}/stats/{{ sample.name }}_SIRVome_mapped_withSupp_readLength.txt
    - {{ results_dir }}/stats/{{ sample.name }}_SIRVome_mapped_noSupp_readLength.txt
    - {{ results_dir }}/stats/{{ sample.name }}_SIRVome_unmapped_readLength.txt
  cpus: 10
  mem: 32G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    {# note: this step aligns reads to the SIRV spike-in reference. If skipped and sample has spike-ins, some SIRVs will align to the human genome. #}
    {# input: pychopper chopped and rescued fastq #}
    {# output: SIRVome mapped SAM #}

    mkdir -p {{ temp_dir }}/minimap2
    mkdir -p {{ results_dir }}/stats

    minimap2 \
      -ax splice \
      --splice-flank=no \
      -t 10 \
      -L \
      {{ constants.grandcanyon.reference_fastaSIRV }} \
      {{ temp_dir }}/pychopper/{{ sample.name }}/pychopper_all.fq |\
    samtools view -@ 10 -b -F 4 \
      -o - \
      -U {{ temp_dir }}/{{ sample.name }}_SIRVome_unmapped.bam |\
    samtools sort -@ 10 -m 6G --write-index -O bam -o {{ results_dir }}/{{ sample.name }}_SIRVome_mapped.bam

    samtools fastq -@ 10 {{ temp_dir }}/{{ sample.name }}_SIRVome_unmapped.bam > {{ temp_dir }}/{{ sample.name }}_SIRVome_unmapped.fq

    {# read lengths: mapped reads only #}
    samtools view -F 4 {{ results_dir }}/{{ sample.name }}_SIRVome_mapped.bam | awk '{print $1,"\t",length($10),"\t","SIRV4"}' > {{ results_dir }}/stats/{{ sample.name }}_SIRVome_mapped_withSupp_readLength.txt &
    {#  read lengths: mapped reads only, no supplementary or secondary reads #}
    samtools view -F 4 -F 256 -F 2048 {{ results_dir }}/{{ sample.name }}_SIRVome_mapped.bam | awk '{print $1,"\t",length($10),"\t","SIRV4"}' > {{ results_dir }}/stats/{{ sample.name }}_SIRVome_mapped_noSupp_readLength.txt &
    {#  read lengths: unmapped reads #}
    samtools view {{ temp_dir }}/{{ sample.name }}_SIRVome_unmapped.bam | awk '{print $1,"\t",length($10),"\t","Unmapped"}' > {{ results_dir }}/stats/{{ sample.name }}_SIRVome_unmapped_readLength.txt &
    wait


{% if tasks['RNA_sirvome_enable_processing_sirvome']|default(true) and tasks['RNA_transcriptome_quantify_expression_salmon']|default(true) %}

- name: minimap2_SIRV_transcriptome_{{ sample.name }}
  input:
    - {{ constants.grandcanyon.transcriptomeSIRV }}
    - {{ temp_dir }}/pychopper/{{ sample.name }}/pychopper_all.fq
  output: {{ results_dir }}/{{ sample.name }}_SIRVome_mapped.transcriptome.bam
  cpus: 10
  mem: 32G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    {# note: this step aligns reads (unmapped to SIRVs) to the human transcriptome #}
    {# input: fq with reads unmapped to SIRVs #}
    {# output: human aligned transcriptome bam for salmon #}
    {# parameters match nanopore workflow https://github.com/nanoporetech/pipeline-transcriptome-de/tree/master #}
    {# -N 100 allows up to 100 secondary alignments (multiple isoforms) #}
    {# -p 1.0 secondary score ratio, this is higher than the default of 0.8 since we are looking for transcriptome isoforms #}

    mkdir -p {{ temp_dir }}/minimap2

    minimap2 \
      -ax map-ont \
      -t 10 \
      -L \
      -N 100 \
      -p 1.0 \
      {{ constants.grandcanyon.transcriptomeSIRV }} \
      {{ temp_dir }}/pychopper/{{ sample.name }}/pychopper_all.fq |\
    samtools view -b -o {{ results_dir }}/{{ sample.name }}_SIRVome_mapped.transcriptome.bam

{% endif %}


- name: minimap2_{{ sample.name }}
  input:
    - {{ constants.grandcanyon.reference_fasta }}
    - {{ temp_dir }}/{{ sample.name }}_SIRVome_unmapped.fq
  output:
    - {{ results_dir }}/{{ sample.name }}.sorted.bam
    - {{ results_dir }}/stats/{{ sample.name }}_mapped_withSupp_readLength.txt
    - {{ results_dir }}/stats/{{ sample.name }}_mapped_noSupp_readLength.txt
    - {{ results_dir }}/stats/{{ sample.name }}_unmapped_readLength.txt
  cpus: 20
  mem: 60G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    {# note: this step converts unmapped SIRV bam to fq #}
    {# input: bam with reads unmapped to SIRVs #}
    {# output: fq with reads unmapped to SIRVs #}

    mkdir -p {{ results_dir }}/stats

    minimap2 \
      -ax map-ont \
      -t 20 \
      -L \
      {{ constants.grandcanyon.reference_fasta }} \
      {{ temp_dir }}/{{ sample.name }}_SIRVome_unmapped.fq |\
    samtools sort -@ 20 -m 6G --write-index -O bam -o {{ results_dir }}/{{ sample.name }}.sorted.bam

    {#  read lengths: mapped reads only #}
    samtools view -@ 4 -F 4 {{ results_dir }}/{{ sample.name }}.sorted.bam | awk '{print $1,"\t",length($10),"\t","Human"}' > {{ results_dir }}/stats/{{ sample.name }}_mapped_withSupp_readLength.txt &
    {#  read lengths: mapped reads only, no supplementary or secondary reads #}
    samtools view -@ 4 -F 4 -F 256 -F 2048 {{ results_dir }}/{{ sample.name }}.sorted.bam | awk '{print $1,"\t",length($10),"\t","Human"}' > {{ results_dir }}/stats/{{ sample.name }}_mapped_noSupp_readLength.txt &
    {#  read lengths: unmapped reads #}
    samtools view -@ 4 -f 4 {{ results_dir }}/{{ sample.name }}.sorted.bam | awk '{print $1,"\t",length($10),"\t","Unmapped"}' > {{ results_dir }}/stats/{{ sample.name }}_unmapped_readLength.txt &
    wait

{% if tasks['RNA_transcriptome_quantify_expression_salmon']|default(true) %}

- name: minimap2_transcriptome_{{ sample.name }}
  input:
    - {{ constants.grandcanyon.transcriptome }}
    - {{ temp_dir }}/{{ sample.name }}_SIRVome_unmapped.fq
  output: {{ results_dir }}/{{ sample.name }}.transcriptome.bam
  cpus: 10
  mem: 32G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    {# note: this step aligns reads (unmapped to SIRVs) to the human transcriptome #}
    {# input: fq with reads unmapped to SIRVs #}
    {# output: human aligned transcriptome bam for salmon #}
    {# parameters match nanopore workflow https://github.com/nanoporetech/pipeline-transcriptome-de/tree/master #}
    {# -N 100 allows up to 100 secondary alignments (multiple isoforms) #}
    {# -p 1.0 secondary score ratio, this is higher than the default of 0.8 since we are looking for transcriptome isoforms #}

    minimap2 \
      -ax map-ont \
      -t 10 \
      -L \
      -N 100 \
      -p 1.0 \
      {{ constants.grandcanyon.transcriptome }} \
      {{ temp_dir }}/{{ sample.name }}_SIRVome_unmapped.fq |\
    samtools view -b -o {{ results_dir }}/{{ sample.name }}.transcriptome.bam

{% endif %}

{% endfor %}
{% endfor %}

{% if tasks['RNA_transcriptome_quantify_expression_featureCounts']|default(true) %}
  {% set sample_bam %}{{ results_dir }}/{{ sample.name }}.sorted.bam{% endset %}
  {% set gtf %}{{ constants.grandcanyon.gtf }}{% endset %}
  {{- pygmy_featurecounts(sample, sample_bam, gtf, SIRV=false) }}
  {% if tasks['RNA_sirvome_enable_processing_sirvome'] | default(true) %}
    {% set sample_bam %}{{ results_dir }}/{{ sample.name }}_SIRVome_mapped.bam{% endset %}
    {% set gtf %}{{ constants.grandcanyon.gtfSIRV }}{% endset %}
    {{- pygmy_featurecounts(sample, sample_bam, gtf, SIRV=true) }}
  {% endif %}
{% endif %}

{% if tasks['RNA_transcriptome_quantify_expression_salmon']|default(true) %}
  {% set transcriptome %}{{ constants.grandcanyon.transcriptome }}{% endset %}
  {% set sample_bam %}{{ results_dir }}/{{ sample.name }}.transcriptome.bam{% endset %}
  {{- pygmy_salmon(sample, sample_bam, transcriptome, SIRV=false) }}
  {% if tasks['RNA_sirvome_enable_processing_sirvome'] | default(true) %}
    {% set transcriptome %}{{ constants.grandcanyon.transcriptomeSIRV }}{% endset %}
    {% set sample_bam %}{{ results_dir }}/{{ sample.name }}_SIRVome_mapped.transcriptome.bam{% endset %}
    {{- pygmy_salmon(sample, sample_bam, transcriptome, SIRV=true) }}
  {% endif %}
{% endif %}

{% if tasks['RNA_transcriptome_quantify_expression_flair']|default(true) %}
  {% set sample_bam %}{{ results_dir }}/{{ sample.name }}.sorted.bam{% endset %}
  {% set reference_fasta %}{{ constants.grandcanyon.reference_fasta }}{% endset %}
  {% set gtf %}{{ constants.grandcanyon.gtf }}{% endset %}
  {{- pygmy_flair(sample, sample_bam, reference_fasta, gtf, SIRV=false) }}
  {% if tasks['RNA_sirvome_enable_processing_sirvome'] | default(true) %}
    {% set sample_bam %}{{ results_dir }}/{{ sample.name }}_SIRVome_mapped.bam{% endset %}
    {% set reference_fasta %}{{ constants.grandcanyon.reference_fastaSIRV }}{% endset %}
    {% set gtf %}{{ constants.grandcanyon.gtfSIRV }}{% endset %}
    {{- pygmy_flair(sample, sample_bam, reference_fasta, gtf, SIRV=true) }}
  {% endif %}
{% endif %}

{% if tasks['RNA_transcriptome_quantify_expression_isoquant']|default(true) %}
  {% set sample_bam %}{{ results_dir }}/{{ sample.name }}.sorted.bam{% endset %}
  {% set reference_fasta %}{{ constants.grandcanyon.reference_fasta }}{% endset %}
  {% set gtf %}{{ constants.grandcanyon.gtf }}{% endset %}
  {{- pygmy_isoquant(sample, sample_bam, reference_fasta, gtf, SIRV=false) }}
  {% if tasks['RNA_sirvome_enable_processing_sirvome'] | default(true) %}
    {% set sample_bam %}{{ results_dir }}/{{ sample.name }}_SIRVome_mapped.bam{% endset %}
    {% set reference_fasta %}{{ constants.grandcanyon.reference_fastaSIRV }}{% endset %}
    {% set gtf %}{{ constants.grandcanyon.gtfSIRV }}{% endset %}
    {{- pygmy_isoquant(sample, sample_bam, reference_fasta, gtf, SIRV=true) }}
  {% endif %}
{% endif %}

{% endmacro %}
