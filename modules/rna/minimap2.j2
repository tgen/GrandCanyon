{% from 'utilities/read_group_line.j2' import read_group_line with context %}
{% from 'modules/rna/featureCounts.j2' import featureCounts with context %}
{% from 'modules/rna/flair.j2' import flair with context %}
{% from 'modules/rna/isoquant.j2' import isoquant with context %}
{% from 'modules/rna/salmon.j2' import salmon with context %}
{% from 'modules/rna/oarfish.j2' import oarfish with context %}

{% macro minimap2_rna(sample) %}

{% set temp_dir %}temp/{{ sample.gltype }}/alignment/minimap2/{{ sample.name }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/alignment/minimap2/{{ sample.name }}{% endset %}

{% for rgid, rg in sample.read_groups.items() %}
{% for file in rg.data_files %}

{% set input_fastq %}temp/fastqs/{{ file.basename.split('.fastq.gz')[0] | replace(".", "_") }}.fastq.gz{% endset %}
{% if tasks['RNA_preprocessing_pychopper']|default(false) %}
{% set decompressed_fastq %}{{ temp_dir }}/pychopper/{{ sample.name }}/{{ file.basename.split('.fastq.gz')[0] | replace(".", "_") }}.fastq{% endset %}
{% set prepped_fastq %}{{ temp_dir }}/pychopper/{{ sample.name }}/pychopper_all.fq{% endset %}

- name: pychopper_{{ sample.name }}
  input: {{ input_fastq }}
  output: {{ prepped_fastq }}
  cpus: 10
  mem: 32G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.pychopper.container }}
  cmd: |

    mkdir -p {{ temp_dir }}/pychopper/{{ sample.name }}

    zcat {{ input_fastq }} > {{ decompressed_fastq }}

    cdna_classifier.py \
      -m edlib \
      -t 10 \
      -r {{ temp_dir }}/pychopper/{{ sample.name }}/report.pdf \
      -A {{ temp_dir }}/pychopper/{{ sample.name }}/aln_hits.bed \
      -S {{ temp_dir }}/pychopper/{{ sample.name }}/statistics.tsv \
      -u {{ temp_dir }}/pychopper/{{ sample.name }}/unclassified.fq \
      -w {{ temp_dir }}/pychopper/{{ sample.name }}/rescued.fq \
      {{ decompressed_fastq }} {{ temp_dir }}/pychopper/{{ sample.name }}/full_length_output.fq

    cat {{ temp_dir }}/pychopper/{{ sample.name }}/full_length_output.fq {{ temp_dir }}/pychopper/{{ sample.name }}/rescued.fq \
      > {{ prepped_fastq }}

{% else %}
  {% set prepped_fastq %}{{ input_fastq }}{% endset %}
{% endif %}

{% if tasks['RNA_sirvome_enable_processing_sirvome']|default(false) %}

- name: minimap2_SIRV_{{ sample.name }}
  input:
    - {{ constants.grandcanyon[reference].reference_fastaSIRV }}
    - {{ prepped_fastq }}
  output:
    - {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.unmapped.fq
    - {{ results_dir }}/{{ sample.name }}.minimap2.sirv.cram
  cpus: 10
  mem: 32G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    mkdir -p {{ temp_dir }}

    minimap2 \
      -ax splice \
      --splice-flank=no \
      -t 10 \
      -L \
      -y \
      -Y \
      -R "{{ read_group_line(rg, format='minimap2') }}" \
      {{ constants.grandcanyon[reference].reference_fastaSIRV }} \
      {{ prepped_fastq }} |\
    samtools view -@ 10 -b -F 4 \
      -o - \
      -U {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.unmapped.bam |\
    samtools sort \
      --threads 10 \
      --reference {{ constants.grandcanyon[reference].reference_fastaSIRV }} \
      -o {{ results_dir }}/{{ sample.name }}}.minimap2.sirv.cram \
      --output-fmt CRAM \
      --write-index \
      -

    samtools fastq -@ 10 --reference {{ constants.grandcanyon[reference].reference_fastaSIRV }} {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.cram > {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.fq
    samtools fastq -@ 10 {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.unmapped.bam > {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.unmapped.fq

- name: minimap2_SIRV_samtools_create_temp_bam_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  input:
    - {{ constants.grandcanyon[reference].reference_fastaSIRV }}
    - {{ results_dir }}/{{ sample.name }}.minimap2.sirv.cram
  output:
    - {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.bam
    - {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.bam.bai
  walltime: "4:00:00"
  cpus: 8
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    samtools view \
      -@ 8 \
      --reference {{ constants.grandcanyon[reference].reference_fastaSIRV }} \
      --no-PG \
      -o {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.bam \
      --write-index \
      {{ results_dir }}/{{ sample.name }}}.minimap2.sirv.cram

{% if tasks['RNA_sirvome_enable_processing_sirvome']|default(false) and tasks['RNA_transcriptome_quantify_expression_salmon']|default(true) %}

- name: minimap2_SIRV_transcriptome_{{ sample.name }}
  input:
    - {{ constants.grandcanyon[reference].transcriptomeSIRV }}
    - {{ prepped_fastq }}
  output: {{ results_dir }}/{{ sample.name }}.minimap2.sirv.transcriptome.cram
  cpus: 10
  mem: 32G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    {# note: this step aligns reads (unmapped to SIRVs) to the human transcriptome #}
    {# input: fq with reads unmapped to SIRVs #}
    {# output: human aligned transcriptome bam for salmon #}
    {# parameters match nanopore workflow https://github.com/nanoporetech/pipeline-transcriptome-de/tree/master #}
    {# -N 100 allows up to 100 secondary alignments (multiple isoforms) #}
    {# -p 1.0 secondary score ratio, this is higher than the default of 0.8 since we are looking for transcriptome isoforms #}

    mkdir -p {{ temp_dir }}/minimap2

    minimap2 \
      -ax map-ont \
      -t 10 \
      -L \
      -y \
      -Y \
      -N 100 \
      -p 1.0 \
      -R "{{ read_group_line(rg, format='minimap2') }}" \
      {{ constants.grandcanyon[reference].transcriptomeSIRV }} \
      {{ prepped_fastq }} |\
    samtools view \
      --threads 10 \
      --reference {{ constants.grandcanyon[reference].transcriptomeSIRV }} \
      -o {{ results_dir }}/{{ sample.name }}.minimap2.sirv.transcriptome.cram \
      --output-fmt CRAM \
      -

 - name: minimap2_SIRV_transcriptome_samtools_create_temp_bam_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  input:
    - {{ constants.grandcanyon[reference].transcriptomeSIRV }}
    - {{ results_dir }}/{{ sample.name }}.minimap2.sirv.transcriptome.cram
  output:
    - {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.transcriptome.bam
  walltime: "4:00:00"
  cpus: 8
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    samtools view \
      -@ 8 \
      --reference {{ constants.grandcanyon[reference].transcriptomeSIRV }} \
      --no-PG \
      -o {{ temp_dir }}/{{ sample.name }}.minimap2.sirv.transcriptome.bam \
      {{ results_dir }}/{{ sample.name }}.minimap2.sirv.transcriptome.cram


{% endif %}
{% endif %}

{% if tasks['RNA_sirvome_enable_processing_sirvome']|default(false) %}
  {% set prepped_fastq %}{{ temp_dir }}/{{ sample.name }}.minimap2.sirv.unmapped.fq{% endset %} 
{% endif %}

- name: minimap2_{{ sample.name }}
  input:
    - {{ constants.grandcanyon[reference].reference_fasta }}
    - {{ constants.grandcanyon[reference].gtf }}
    - {{ prepped_fastq }}
  output:
    - {{ results_dir }}/{{ sample.name }}.minimap2.cram
  cpus: 20
  mem: 80G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    paftools.js gff2bed {{ constants.grandcanyon[reference].gtf }} > {{ temp_dir }}/{{ sample.name }}_anno.bed

    minimap2 \
      {% if sample.glprep in 'kinnex' %}
      -ax splice:hq \
      -uf \
      {% else %}
      -ax splice \
      {% endif %}
      --junc-bed {{ temp_dir }}/{{ sample.name }}_anno.bed \
      -t 20 \
      -L \
      -y \
      -Y \
      -R "{{ read_group_line(rg, format='minimap2') }}" \
      {{ constants.grandcanyon[reference].reference_fasta }} \
      {{ prepped_fastq }} |\
    samtools sort \
      --threads 20 \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      -o {{ results_dir }}/{{ sample.name }}.minimap2.cram \
      --output-fmt CRAM \
      --write-index \
      -

- name: minimap2_samtools_create_temp_bam_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  input:
    - {{ constants.grandcanyon[reference].reference_fasta }}
    - {{ results_dir }}/{{ sample.name }}.minimap2.cram
  output:
    - {{ temp_dir }}/{{ sample.name }}.minimap2.bam
    - {{ temp_dir }}/{{ sample.name }}.minimap2.bam.bai
  walltime: "4:00:00"
  cpus: 8
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    samtools view \
      -@ 8 \
      --reference {{ constants.grandcanyon[reference].reference_fasta }} \
      --no-PG \
      -o {{ temp_dir }}/{{ sample.name }}.minimap2.bam \
      --write-index \
      {{ results_dir }}/{{ sample.name }}.minimap2.cram

{% if tasks['RNA_transcriptome_quantify_expression_salmon']|default(true) %}

- name: minimap2_transcriptome_{{ sample.name }}
  input:
    - {{ constants.grandcanyon[reference].transcriptome }}
    - {{ prepped_fastq }}
  output: {{ results_dir }}/{{ sample.name }}.minimap2.transcriptome.cram
  cpus: 10
  mem: 32G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    minimap2 \
      -ax map-ont \
      -t 10 \
      -L \
      -y \
      -Y \
      -N 100 \
      -p 1.0 \
      -R "{{ read_group_line(rg, format='minimap2') }}" \
      {{ constants.grandcanyon[reference].transcriptome }} \
      {{ prepped_fastq }} |\
    samtools view \
      --threads 10 \
      --reference {{ constants.grandcanyon[reference].transcriptome }} \
      -o {{ results_dir }}/{{ sample.name }}.minimap2.transcriptome.cram \
      --output-fmt CRAM \
      -

 - name: minimap2_transcriptome_samtools_create_temp_bam_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  input:
    - {{ constants.grandcanyon[reference].transcriptome }}
    - {{ results_dir }}/{{ sample.name }}.minimap2.transcriptome.cram
  output:
    - {{ temp_dir }}/{{ sample.name }}.minimap2.transcriptome.bam
  walltime: "4:00:00"
  cpus: 8
  mem: 8G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.minimap2.container }}
  cmd: |

    samtools view \
      -@ 8 \
      --reference {{ constants.grandcanyon[reference].transcriptome }} \
      --no-PG \
      -o {{ temp_dir }}/{{ sample.name }}.minimap2.transcriptome.bam \
      {{ results_dir }}/{{ sample.name }}.minimap2.transcriptome.cram


{% endif %}

{% if tasks['RNA_transcriptome_quantify_expression_featureCounts']|default(true) %}
  {% set sample_bam %}{{ temp_dir }}/{{ sample.name }}.minimap2.bam{% endset %}
  {% set gtf %}{{ constants.grandcanyon[reference].gtf }}{% endset %}
  {{- featureCounts(sample, sample_bam, gtf, SIRV=false) }}
  {% if tasks['RNA_sirvome_enable_processing_sirvome'] | default(true) %}
    {% set sample_bam %}{{ temp_dir }}/{{ sample.name }}.minimap2.sirv.bam{% endset %}
    {% set gtf %}{{ constants.grandcanyon[reference].gtfSIRV }}{% endset %}
    {{- featureCounts(sample, sample_bam, gtf, SIRV=true) }}
  {% endif %}
{% endif %}

{% if tasks['RNA_transcriptome_quantify_expression_salmon']|default(true) %}
  {% set transcriptome %}{{ constants.grandcanyon[reference].transcriptome }}{% endset %}
  {% set sample_bam %}{{ temp_dir }}/{{ sample.name }}.minimap2.transcriptome.bam{% endset %}
  {{- salmon(sample, sample_bam, transcriptome, SIRV=false) }}
  {% if tasks['RNA_sirvome_enable_processing_sirvome'] | default(true) %}
    {% set transcriptome %}{{ constants.grandcanyon[reference].transcriptomeSIRV }}{% endset %}
    {% set sample_bam %}{{ temp_dir }}/{{ sample.name }}.minimap2.sirv.transcriptome.bam{% endset %}
    {{- salmon(sample, sample_bam, transcriptome, SIRV=true) }}
  {% endif %}
{% endif %}

{% if tasks['RNA_transcriptome_quantify_expression_oarfish']|default(true) %}
  {% set sample_bam %}{{ temp_dir }}/{{ sample.name }}.minimap2.transcriptome.bam{% endset %}
  {{- oarfish(sample, sample_bam) }}
{% endif %}


{% if tasks['RNA_transcriptome_quantify_expression_flair']|default(true) %}
  {% set sample_bam %}{{ temp_dir }}/{{ sample.name }}.minimap2.bam{% endset %}
  {% set reference_fasta %}{{ constants.grandcanyon[reference].reference_fasta }}{% endset %}
  {% set gtf %}{{ constants.grandcanyon[reference].gtf }}{% endset %}
  {{- flair(sample, sample_bam, prepped_fastq, reference_fasta, gtf, SIRV=false) }}
  {% if tasks['RNA_sirvome_enable_processing_sirvome'] | default(true) %}
    {% set sirv_fastq %}{{ temp_dir }}/{{ sample.name }}.minimap2.sirv.fq{% endset %}
    {% set sample_bam %}{{ temp_dir }}/{{ sample.name }}.minimap2.sirv.bam{% endset %}
    {% set reference_fasta %}{{ constants.grandcanyon[reference].reference_fastaSIRV }}{% endset %}
    {% set gtf %}{{ constants.grandcanyon[reference].gtfSIRV }}{% endset %}
    {{- flair(sample, sample_bam, sirv_fastq, reference_fasta, gtf, SIRV=true) }}
  {% endif %}
{% endif %}

{% if tasks['RNA_transcriptome_quantify_expression_isoquant']|default(true) %}
  {% set sample_bam %}{{ temp_dir }}/{{ sample.name }}.minimap2.bam{% endset %}
  {% set reference_fasta %}{{ constants.grandcanyon[reference].reference_fasta }}{% endset %}
  {% set gtf %}{{ constants.grandcanyon[reference].gtf }}{% endset %}
  {{- isoquant(sample, sample_bam, reference_fasta, gtf, SIRV=false) }}
  {% if tasks['RNA_sirvome_enable_processing_sirvome'] | default(true) %}
    {% set sample_bam %}{{ temp_dir }}/{{ sample.name }}.minimap2.sirv.bam{% endset %}
    {% set reference_fasta %}{{ constants.grandcanyon[reference].reference_fastaSIRV }}{% endset %}
    {% set gtf %}{{ constants.grandcanyon[reference].gtfSIRV }}{% endset %}
    {{- isoquant(sample, sample_bam, reference_fasta, gtf, SIRV=true) }}
  {% endif %}
{% endif %}

{% endfor %}
{% endfor %}

{% endmacro %}
