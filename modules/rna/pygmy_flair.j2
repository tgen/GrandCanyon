{% macro pygmy_flair(temp_dir, result_dir, sample, sample_bam, reference_fasta, gtf, SIRV=false) %}

- name: flair_{{ sample.name }}
  input: {{ temp_dir }}/minimap2/{{ sample.name }}/{{ sample.name }}.Aligned.out.sorted.bam
  output:
    - {{ temp_dir }}/flair/{{ sample.name }}/flair.collapse.isoforms.fa
    - {{ temp_dir }}/flair/{{ sample.name }}/{{ sample.name }}_flair_top10.txt
  cpus: 10
  mem: 32G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.flair.container }}
  cmd: |

    {# note: this step performs flair for read correction, annotation, and quantification #}
    {# input: human aligned genome bam #}
    {# output: isoforms.fa, quantification, gtf #}

    mkdir -p {{ temp_dir }}/flair/{{ sample.name }}
    cd {{ temp_dir }}/flair/{{ sample.name }}

    {# we already did alignment, skipping flair align step and converting bam to bed for flair correct #}
    bam2Bed12 -i {{ temp_dir }}/minimap2/{{ sample.name }}/{{ sample.name }}.Aligned.out.sorted.bam > flair.aligned.bed
    flair correct -q flair.aligned.bed -g {{ constants.grandcanyon.reference_fasta }} -t 10 -f {{ constants.grandcanyon.gtf }}
    flair collapse -g {{ constants.grandcanyon.reference_fasta }} -r {{ temp_dir }}/minimap2/{{ sample.name }}/{{ sample.name }}_SIRVome_unmapped.fq -f {{ constants.grandcanyon.gtf }} -q flair_all_corrected.bed -t 10

    {# generate reads_mainfest.tsv file for flair quantify #}
    printf "{{ sample.name }}\t{{ sample.name }}\tbatch1\t{{ ubam }}" > reads_manifest.tsv.tmp
    awk '{gsub("_","", $1)}1' reads_manifest.tsv.tmp | awk '{gsub("_","", $2)}1' | awk '{gsub("_","", $3)}1' > reads_manifest.tsv.tmp2
    sed -i 's/ /\t/g' reads_manifest.tsv.tmp2
    ( printf "\xff\xfe" ; iconv -f utf-8 -t utf-16le reads_manifest.tsv.tmp2 ) > reads_manifest.tsv

    flair quantify -r reads_manifest.tsv -i flair.collapse.isoforms.fa
    flair quantify -r reads_manifest.tsv -i flair.collapse.isoforms.fa --tpm

    {# generate file with the 10 longest isoforms #}
    awk '/^>/ {printf("%s%s\t",(N>0?"\n":""),$0);N++;next;} {printf("%s",$0);} END {printf("\n");}' flair.collapse.isoforms.fa |\
    awk '{printf("%d\t%s\t%s\t%s\n",length($2),$1,$1,$2);}' |\
    sort -t $'\t' -k1,1nr | cut -f 1,2 | head > {{ sample.name }}_flair_top10.txt

{% endmacro %}
