{% from 'modules/assembly/flye.j2' import flye with context %}
{% from 'modules/assembly/hifiasm.j2' import hifiasm with context %}

{%- macro assembly(samples) %}

  {% set pairs = [] %}
  {% for sample in samples.values()|selectattr('subGroup', 'eq', 'Constitutional')|selectattr('glType', 'eq', 'Genome') %}
    {% set pair = {'project': project} %}
    {% do pair.update({'gltype': 'genome'}) %}
    {% do pair.update({'ont': []}) %}
    {% do pair.update({'pacbio': []}) %}
    {% do pair.update({'short': []}) %}
    {% set log_msg %}Collecting sequencing data types for {{ project }}, we will then attempt an assembly{% endset %}
    {{ log(log_msg, level='WARNING') }}
    {% set log_msg %}Parsing {{ sample.name }}{% endset %}
    {{ log(log_msg, level='WARNING') }}
    {% if sample.rgpl in ('ONT') %}
      {% do pair.ont.append(sample.read_groups.values()|first) %}
      {% set log_msg %}{{ sample.name }} was added to ont list{% endset %}
      {{ log(log_msg, level='WARNING') }}
    {% elif sample.rgpl in ('PACBIO') %}
      {% do pair.pacbio.append(sample.read_groups.values()|first) %}
      {% set log_msg %}{{ sample.name }} was added to pacbio list{% endset %}
      {{ log(log_msg, level='WARNING') }}
    {% else %}
      {% do pair.short.append(sample.read_groups.values()|first) %}
      {% set log_msg %}{{ sample.name }} did not match ont or pacbio patterns, so it is assumed to be short read data{% endset %}
      {{ log(log_msg, level='WARNING') }}
    {% endif %}
    {% do pairs.append(pair) %}
  {% endfor %}

  {% for pair in pairs %}
    {% if tasks[taskPrefix+"_assembly_flye"]|default(true) %}
      {{- flye(pair) }}
    {% endif %}
    {% if tasks[taskPrefix+"_assembly_hifiasm"]|default(true) %}
      {{- hifiasm(pair) }}
    {% endif %}
  {% endfor %}

{% endmacro %}

