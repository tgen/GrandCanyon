{% from 'modules/assembly/flye.j2' import flye with context %}
{% from 'modules/assembly/verkko.j2' import verkko with context %}
{% from 'modules/assembly/shasta.j2' import shasta with context %}
{% from 'modules/assembly/hifiasm.j2' import hifiasm with context %}
{% from 'modules/assembly/herro.j2' import herro with context %}
{% from 'modules/assembly/meryl.j2' import meryl with context %}
{% from 'modules/assembly/ul_filter.j2' import ul_filter with context %}

{%- macro assembly() %}

  {% set input = {'project': project} %}
  {% do input.update({'gltype': 'genome'}) %}
  {% do input.update({'ulong': []}) %}
  {% do input.update({'corr': []}) %}
  {% do input.update({'hifi': []}) %}
  {% do input.update({'duplex': []}) %}
  {% do input.update({'hic_r1': []}) %}
  {% do input.update({'hic_r2': []}) %}

  {% for file in dataFiles|selectattr('subGroup', 'eq', 'Constitutional')|selectattr('gltype', 'in', ['genome']) %}
    {% if file.glprep == '3c' %}
      {% set hic_file %}temp/fastqs/{{ file.basename }}{% endset %}
      {% if file.fastqCode == 'R1' %}
        {% do input.hic_r1.append(hic_file) %}
      {% elif file.fastqCode == 'R2' %}
        {% do input.hic_r2.append(hic_file) %}
      {% endif %}
    {% elif file.rgpl in ('ONT') %}
      {% if file.fastqCode == 'simplex' %}
        {% set duplex_matches = dataFiles|selectattr('fastqCode', 'eq', 'duplex')|selectattr('sampleName', 'eq', file.sampleName)|selectattr('rgid', 'eq', file.rgid)|list %}
        {% if not duplex_matches | length > 0 %}
          {% set simplex_file %}temp/fastqs/{{ file.basename | replace(".", "_") }}.fastq.gz{% endset %}
          {% set ul_file %}temp/fastqs/{{ file.basename | replace(".", "_") }}.ul.filtered.fastq.gz{% endset %}
          {{- ul_filter(simplex_file, ul_file) }}
          {% do input.ulong.append(ul_file) %}

          {% set corrected_file %}temp/fastqs/{{ file.basename | replace(".", "_") }}.corrected.fa{% endset %}
          {% if tasks.Genome_assembly_long_read_assembler_herro_correction | default(false) %}
            {{- herro(input, simplex_file, corrected_file) }}
            {% do input.corr.append(corrected_file) %}
          {% endif %}
        {% endif %}
      {% elif file.fastqCode == 'duplex' %}
        {% set simplex_file %}temp/fastqs/{{ file.basename | replace(".", "_") }}.simplex.fastq.gz{% endset %}
        {% set ul_file %}temp/fastqs/{{ file.basename | replace(".", "_") }}.ul.simplex.filtered.fastq.gz{% endset %}
        {{- ul_filter(simplex_file, ul_file) }}
        {% do input.ulong.append(ul_file) %}

        {% set duplex_file %}temp/fastqs/{{ file.basename | replace(".", "_") }}.fastq.gz{% endset %}
        {% do input.duplex.append(duplex_file) %}
        {% set ul_file %}temp/fastqs/{{ file.basename | replace(".", "_") }}.ul.filtered.fastq.gz{% endset %}
        {{- ul_filter(duplex_file, ul_file) }}
        {% do input.ont.append(ul_file) %}

        {% set corrected_file %}temp/fastqs/{{ file.basename | replace(".", "_") }}.simplex.corrected.fa{% endset %}
        {% if tasks.Genome_assembly_long_read_assembler_herro_correction | default(false) %}
          {% do input.corr.append(corrected_file) %}
          {{- herro(input, simplex_file, corrected_file) }}
        {% endif %}
      {% endif %}
    {% elif file.rgpl in ('PACBIO') %}
      {% set pacbio_file %}temp/fastqs/{{ file.basename | replace(".", "_") }}.fastq.gz{% endset %}
      {% do input.hifi.append(pacbio_file) %}
    {% endif %}
  {% endfor %}

  {% if input.gltype in 'exome' %}
    {% set taskPrefix = 'Exome' %}
  {% elif input.gltype in 'genome' %}
    {% set taskPrefix = 'Genome' %}
  {% endif %}
  {% if tasks[taskPrefix+"_assembly_long_read_assembler_flye"]|default(false) %}
    {% set assembly_enabled = true %}
    {{- flye(input) }}
  {% endif %}
  {% if tasks[taskPrefix+"_assembly_long_read_assembler_hifiasm"]|default(false) %}
    {% set assembly_enabled = true %}
    {{- hifiasm(input) }}
  {% endif %}
  {% if tasks[taskPrefix+"_assembly_long_read_assembler_verkko"]|default(false) %}
    {% set assembly_enabled = true %}
    {{- verkko(input) }}
  {% endif %}
  {% if tasks[taskPrefix+"_assembly_long_read_assembler_shasta"]|default(false) %}
    {% set assembly_enabled = true %}
    {{- shasta(input) }}
  {% endif %}
  {% if assembly_enabled|default(false) %}
    {{- meryl(input) }}
  {% endif %}

{% endmacro %}

