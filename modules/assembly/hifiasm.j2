{% from 'modules/assembly/assembly_qc.j2' import assembly_qc with context %}
{% from 'modules/assembly/quast.j2' import quast with context %}

{% from 'modules/assembly/minimap2.j2' import minimap2_asm with context %}
{% from 'modules/assembly/mashmap.j2' import mashmap with context %}

{% from 'modules/assembly/plotting.j2' import moddotplot with context %}

{% macro hifiasm(input) %}

{%- set temp_dir %}temp/{{ input.gltype }}/assembly/hifiasm/{{ input.project }}{% endset %}
{%- set results_dir %}{{ input.gltype }}/assembly/hifiasm/{{ input.project }}{% endset %}

{% set hifi_list = input.hifi %}
{% set ont_list = input.duplex + input.corr %}
{% if ont_list | length > 0 %}
{% set chopped_ont %}temp/fastqs/{{ input.project }}.chopped.ont.fastq.gz{% endset %}
{% set hifi_list = input.hifi + [chopped_ont] %}
{% endif %}

{# PacBio Hifi reads are consistently between 10kb and 30 kb, and therefore it does not need chopping #}
{% if ont_list | length > 0 %}
- name: prep_hifiasm_input_{{ input.project }}
  input:
    {% for file in ont_list %}
    - {{ file }}
    {% endfor %}
  output:
    - {{ chopped_ont }}
  cpus: 4
  mem: 16G
  walltime: "8:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.seqkit.container }}
  cmd: |
    set -eu

    seqkit sliding \
      -s 30000 \
      -W 30000 \
      -g {{ ont_list | join(' ') }} |\
    seqkit seq \
      -m 10000 \
      -o {{ chopped_ont }} \
      -
{% endif %}

{% if hifi_list | length > 0 %}
- name: hifiasm_{{ input.project }}
  input:
    {% for file in hifi_list + input.ulong %}
    - {{ file }}
    {% endfor %}
  output:
    - {{ results_dir }}/{{ input.project }}.asm.bp.p_ctg.fa
    - {{ results_dir }}/{{ input.project }}.asm.bp.hap1.p_ctg.fa
    - {{ results_dir }}/{{ input.project }}.asm.bp.hap2.p_ctg.fa
  cpus: 32
  mem: 600G
  walltime: "48:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.hifiasm.container }}
  cmd: |
    set -eu
    set -o pipefail

    export TMPDIR={{ temp_dir }}

    rm -r {{ temp_dir }} || true
    mkdir -p {{ temp_dir }}
    mkdir -p {{ results_dir }}

    hifiasm \
      -t 32 \
      -o {{ temp_dir }}/{{ input.project }}.asm \
      --telo-m CCCTAA \
      {% if input.ulong | length > 0 %}
      --ul "{{ input.ulong | join(',') }}" \
      --ul-cut 50000 \
      {% endif %}
      {% if input.hic_r1 | length > 0 %}
      --h1 "{{ input.hic_r1 | sort | join(',') }}" \
      --h2 "{{ input.hic_r2 | sort | join(',') }}" \
      {% endif %}
      {{ hifi_list | join(' ') }}

    for graph in {{ temp_dir }}/{{ input.project }}.asm.*.gfa ; do
      awk '/^S/{print ">"$2;print $3}' ${graph} > {{ results_dir }}/$(basename ${graph%.gfa}.fa)
    done
    mv {{ temp_dir }}/{{ input.project }}.asm.bp.* {{ results_dir }}/

{% set primary_assembly %}{{ results_dir }}/{{ input.project }}.asm.bp.p_ctg.fa{% endset %}
{% set haplotype1_assembly %}{{ results_dir }}/{{ input.project }}.asm.bp.hap1.p_ctg.fa{% endset %}
{% set haplotype2_assembly %}{{ results_dir }}/{{ input.project }}.asm.bp.hap2.p_ctg.fa{% endset %}
{% set input_assemblies = [primary_assembly, haplotype1_assembly, haplotype2_assembly] %}

{% if tasks.Genome_assembly_metrics_assembly_qc|default(false) %}
{{- assembly_qc(input, primary_assembly, 'hifiasm') }}
{% endif %}

{% if tasks.Genome_assembly_metrics_quast|default(false) %}
{{- quast(input, results_dir, input_assemblies, 'hifiasm') }}
{% endif %}

{% if tasks.Genome_assembly_metrics_align_minimap2|default(false) %}
{{- minimap2_asm(input, primary_assembly, 'hifiasm') }}
{% endif %}
{% if tasks.Genome_assembly_metrics_align_mashmap|default(false) %}
{{- mashmap(input, primary_assembly, 'hifiasm') }}
{% endif %}
{% if tasks.Genome_assembly_metrics_moddotplot|default(false) %}
{{- moddotplot(input, primary_assembly, 'hifiasm') }}
{% endif %}

{% else %}
  {% set log_msg %}hifiasm was enabled, but no pacbio data was found. Hifiasm requires pacbio input data, so this task was skipped{% endset %}
  {{ log(log_msg, level='WARNING') }}
{% endif %}
{% endmacro %}
