{#
#Using default settings for complete dataset with enough coverage (10)
# singularity exec -B $PWD -B $DIR $CANU sh -c "canu -p $PREFIX -d $DIR genomeSize=${GENOME_SIZE} -pacbio-hifi $INPUT"

#For testing with downsized data
#singularity exec -B $PWD -B $DIR $CANU sh -c "canu -p $PREFIX -d $DIR stopOnLowCoverage=0.1 minInputCoverage=0.1 genomeSize=${GENOME_SIZE} -pacbio-hifi $INPUT"
#}

{% from 'modules/assembly/assembly_stats.j2' import assembly_stats with context %}
{% from 'modules/assembly/quast.j2' import quast with context %}

{% from 'modules/assembly/minimap2.j2' import minimap2_asm with context %}
{% from 'modules/assembly/mashmap.j2' import mashmap with context %}

{% from 'modules/assembly/plotting.j2' import moddotplot with context %}

{% macro canu(pair) %}

{%- set temp_dir %}temp/{{ pair.gltype }}/assembly/canu/{{ pair.project }}{% endset %}
{%- set results_dir %}{{ pair.gltype }}/assembly/canu/{{ pair.project }}{% endset %}

{% set ontfqlist = [] %}
{% set pacbiofqlist = [] %}

{% for file in pair.pacbio %}
    {% set pacbiofq %}temp/fastqs/{{ file.basename.split('.fastq.gz')[0] | replace(".", "_") }}.fastq.gz{% endset %}
    {% do pacbiofqlist.append(pacbiofq) %}
{% endfor %}

{% for file in pair.ont|selectattr('fastqCode', 'eq', 'duplex')|list %}
    {% set duplexfq %}temp/fastqs/{{ file.basename.split('.fastq.gz')[0] | replace(".", "_") }}.fastq.gz{% endset %}
    {% do pacbiofqlist.append(duplexfq) %}
    {% set simplexfq %}temp/fastqs/{{ file.basename.split('.fastq.gz')[0] | replace(".", "_") }}.simplex.fastq.gz{% endset %}
    {% do ontfqlist.append(simplexfq) %}
{% endfor %}

{% for file in pair.ont|selectattr('fastqCode', 'eq', 'simplex')|list %}
    {% set ontfq %}temp/fastqs/{{ file.basename.split('.fastq.gz')[0] | replace(".", "_") }}.fastq.gz{% endset %}
    {% do ontfqlist.append(ontfq) %}
{% endfor %}

- name: canu_{{ pair.project }}
  input:
    {% for ontfq in ontfqlist %}
    - {{ ontfq }}
    {% endfor %}
    {% for pacbiofq in pacbiofqlist %}
    - {{ pacbiofq }}
    {% endfor %}
  output:
    - {{ temp_dir }}/assembly.fasta
  cpus: 32
  mem: 240G
  walltime: "72:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.canu.container }}
  cmd: |
    set -eu
    set -o pipefail

    rm -r {{ temp_dir }} || true
    mkdir -p {{ temp_dir }}
    mkdir -p {{ results_dir }}

    canu \
      {% if pacbiofqlist | length > 0 %}
      -pacbio-hifi "{{ pacbiofqlist | join('" "') }}" \
      {% elif ontfqlist | length > 0 %}
      -nanopore "{{ ontfqlist | join('" "') }}" \
      {% endif %}
      -p {{ pair.project }} \
      -d {{ temp_dir }} \
      genomeSize=3.2g

{% set input_assembly %}{{ results_dir }}/assembly.fasta{% endset %}
{{- assembly_stats(pair, input_assembly, 'canu') }}
{{- quast(pair, input_assembly, 'canu') }}

{% if tasks.assembly_align_minimap2 | default(true) %}
{{- minimap2_asm(pair, input_assembly, 'canu') }}
{% endif %}
{% if tasks.assembly_align_mashmap | default(false) %}
{{- mashmap(pair, input_assembly, 'canu') }}
{% endif %}
{% if tasks.assembly_moddotplot | default(false) %}
{{- moddotplot(pair, input_assembly, 'canu') }}
{% endif %}

{% endmacro %}

