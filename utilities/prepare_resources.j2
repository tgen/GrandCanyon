{% macro prepare_reference() %}

- name: create_samtools_resources_for_{{ reference | replace('.', '_') }}
  input: {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    - {{ constants.grandcanyon[reference].reference_fai }}
    - {{ constants.grandcanyon[reference].reference_dict }}
    - {{ constants.grandcanyon[reference].primary_interval_list }}
  cpus: 4
  mem: 16G
  walltime: "4:00:00"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -uev

    [ -e {{ constants.grandcanyon[reference].reference_fai }} ] ||\
    samtools faidx {{ constants.grandcanyon[reference].reference_fasta }}

    [ -e {{ constants.grandcanyon[reference].reference_dict }} ] ||\
    samtools dict \
      -o {{ constants.grandcanyon[reference].reference_dict }} \
      {{ constants.grandcanyon[reference].reference_fasta }}

    [ -e {{ constants.grandcanyon[reference].primary_interval_list }} ] ||\
    grep 'SN:\(chr\)\?[0-9]\+\([a-z]\)\?\s' {{ constants.grandcanyon[reference].reference_dict }} |\
      sed 's/SN://;s/LN://' |\
      awk '{ OFS="\t" ; print $2,1,$3 }' \
      > {{ constants.grandcanyon[reference].primary_interval_list }}

{% endmacro %}

{% macro prepare_bwa_index() %}

- name: create_bwa_index_for_{{ reference | replace('.', '_') }}
  input:
    - {{ constants.grandcanyon[reference].reference_fasta }}
    - {{ constants.grandcanyon[reference].reference_fai }}
    {% if constants.grandcanyon[reference].reference_alts is defined %}
    - {{ constants.grandcanyon[reference].reference_alts }}
    {% endif %}
  output:
    - {{ constants.grandcanyon[reference].bwa_mem2_index }}
  cpus: 4
  mem: 16G
  walltime: "4:00:00"
  container: {{ constants.tools.bwa_mem2_samtools.container }}
  cmd: |
    set -uev

    mkdir -p $(dirname {{ constants.grandcanyon[reference].bwa_mem2_index }})
    cd $(dirname {{ constants.grandcanyon[reference].bwa_mem2_index }})

    if [ ! -e {{ constants.grandcanyon[reference].reference_fasta | basename }}.bwt.2bit.64 ] ; then
      [ -e {{ constants.grandcanyon[reference].reference_fasta | basename }} ] ||\
      ln -s {{ constants.grandcanyon[reference].reference_fasta }} .

      [ -e {{ constants.grandcanyon[reference].reference_fai | basename }} ] ||\
      ln -s {{ constants.grandcanyon[reference].reference_fai }} .

      {% if constants.grandcanyon[reference].reference_alts is defined %}
      [ -e {{ constants.grandcanyon[reference].reference_alts | basename }} ] ||\
      rsync {{ constants.grandcanyon[reference].reference_alts }} .
      {% endif %}

      bwa-mem2 index {{ constants.grandcanyon[reference].reference_fasta | basename }}
    fi

{% endmacro %}


{% macro prepare_chunk_intervals(exclusion_list=none) %}

{% set temp_dir %}temp/pipeline_resources{% endset %}

- name: create_chunking_intervals_for_{{ reference | replace('.', '_') }}
  input: {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    {% for chunk in range(1, num_chunks+1) %}
    - {{ temp_dir }}/calling_intervals/calling_interval_{{ chunk }}.bed
    - {{ temp_dir }}/calling_intervals/primary_calling_interval_{{ chunk }}.bed
    {% endfor %}
  cpus: 4
  mem: 16G
  walltime: "4:00:00"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -uev

    mkdir -p {{ temp_dir }}/calling_intervals

    gatk ScatterIntervalsByNs \
      --REFERENCE {{ constants.grandcanyon[reference].reference_fasta }} \
      --OUTPUT_TYPE ACGT \
      --OUTPUT {{ temp_dir }}/calling_intervals/{{ constants.grandcanyon[reference].reference_fasta | basename }}.ACGT.interval_list

    grep '^\(@SQ\sSN:\)\?\(chr\)\?[0-9XY]\+' {{ temp_dir }}/calling_intervals/{{ constants.grandcanyon[reference].reference_fasta | basename }}.ACGT.interval_list \
    > {{ temp_dir }}/calling_intervals/{{ constants.grandcanyon[reference].reference_fasta | basename }}.ACGT.primary_interval_list

    gatk IntervalListTools \
      --SCATTER_COUNT {{ num_chunks }} \
      --SUBDIVISION_MODE BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW \
      --UNIQUE true \
      --SORT true \
      --INPUT {{ temp_dir }}/calling_intervals/{{ constants.grandcanyon[reference].reference_fasta | basename }}.ACGT.interval_list \
      --OUTPUT {{ temp_dir }}/calling_intervals/gatk_chunk_intervals

    for interval in {{ temp_dir }}/calling_intervals/gatk_chunk_intervals/temp_00*_of_{{ num_chunks }}/scattered.interval_list ; do
      chunk=$(echo "$interval" | grep -oP '[0-9]{4}' | sed 's/^0\+//')
      grep -v '^@' $interval | awk '{ OFS="\t" ; print $1,$2-1,$3 }' > {{ temp_dir }}/calling_intervals/calling_interval_${chunk}.bed
    done

    gatk IntervalListTools \
      --SCATTER_COUNT {{ num_chunks }} \
      --SUBDIVISION_MODE BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW \
      --UNIQUE true \
      --SORT true \
      --INPUT {{ temp_dir }}/calling_intervals/{{ constants.grandcanyon[reference].reference_fasta | basename }}.ACGT.primary_interval_list \
      --OUTPUT {{ temp_dir }}/calling_intervals/primary_chunk_intervals

    for interval in {{ temp_dir }}/calling_intervals/primary_chunk_intervals/temp_00*_of_{{ num_chunks }}/scattered.interval_list ; do
      chunk=$(echo "$interval" | grep -oP '[0-9]{4}' | sed 's/^0\+//')
      grep -v '^@' $interval | awk '{ OFS="\t" ; print $1,$2-1,$3 }' > {{ temp_dir }}/calling_intervals/primary_calling_interval_${chunk}.bed
    done

{% endmacro %}

{% macro prepare_gene_model() %}

- name: create_gene_model_resources_for_{{ reference | replace('.', '_') }}
  input: {{ constants.grandcanyon[reference].gtf }}
  output:
    - {{ constants.grandcanyon[reference].gtf }}.gene.bed
    - {{ constants.grandcanyon[reference].gtf }}.exon.bed
    - {{ constants.grandcanyon[reference].gtf }}.cds.bed
  cpus: 4
  mem: 16G
  walltime: "4:00:00"
  container: {{ constants.tools.bedtools.container }}
  cmd: |
    set -uev

    awk -F '[\t"]' '$1 !~ /^#/ { if ($3 == "gene") { OFS = "\t" ; print $1, $4, $5, $10 }}' {{ constants.grandcanyon[reference].gtf }} |\
      sort -k1,1V -k2,2n -k3,3n > {{ constants.grandcanyon[reference].gtf }}.gene.bed

    awk -F '[\t"]' '$1 !~ /^#/ { if ($3 == "exon") { OFS = "\t" ; print $1, $4, $5, $10 }}' {{ constants.grandcanyon[reference].gtf }} |\
      sort -k1,1V -k2,2n -k3,3n > {{ constants.grandcanyon[reference].gtf }}.exon.bed

    awk -F '[\t"]' '$1 !~ /^#/ { if ($3 == "CDS" && $4 < $5) { OFS = "\t" ; print $1, $4, $5, "CDS" }}' {{ constants.grandcanyon[reference].gtf }} |\
      awk '!dup[$0]++' | sort -k1,1V -k2,2n -k3,3n | bedtools merge -i - > {{ constants.grandcanyon[reference].gtf }}.cds.bed

- name: create_rnaseq_resources_for_{{ reference | replace('.', '_') }}
  input:
    - {{ constants.grandcanyon[reference].gtf }}
    - {{ constants.grandcanyon[reference].reference_dict }}
  output:
    - {{ constants.grandcanyon[reference].ref_flat }}
    - {{ constants.grandcanyon[reference].ribo_locations }}
    - {{ constants.grandcanyon[reference].gtf }}.refFlat.hugoID.txt
  cpus: 1
  mem: 4G
  walltime: "1:00:00"
  container: quay.io/biocontainers/ucsc-gtftogenepred:469--h664eb37_1
  cmd: |
    set -eu

    [ -e {{ constants.grandcanyon[reference].ref_flat }} ] ||\
    gtfToGenePred -genePredExt \
        -ignoreGroupsWithoutExons \
        {{ constants.grandcanyon[reference].gtf }} \
        /dev/stdout |\
        awk 'BEGIN { OFS="\t"} {print $12, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10}' > {{ constants.grandcanyon[reference].ref_flat }}

    [ -e {{ constants.grandcanyon[reference].ribo_locations }} ] ||\
    grep -w "rRNA" {{ constants.grandcanyon[reference].gtf }} |\
        cut -f1,4,5,7,9 |\
        sed 's/gene_id "//g' |\
        sed 's/"; transcript_id "/\'$'\t''/g' |\
        cut -f1-5 |\
    cat {{ constants.grandcanyon[reference].reference_dict }} - > {{ constants.grandcanyon[reference].ribo_locations }}

    [ -e {{ constants.grandcanyon[reference].gtf }}.refFlat.hugoID.txt ] ||\
    gtfToGenePred -genePredExt \
        -ignoreGroupsWithoutExons \
        -geneNameAsName2 \
        {{ constants.grandcanyon[reference].gtf }} \
        /dev/stdout |\
        awk 'BEGIN { OFS="\t"} {print $12, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10}' > {{ constants.grandcanyon[reference].gtf }}.refFlat.hugoID.txt

    {#
    ### We typically pull a transcriptome fasta, so this is disabled for now
    # gffread {{ constants.grandcanyon[reference].gtf }} -g {{ constants.grandcanyon[reference].reference_fasta }} -w {{ constants.grandcanyon[reference].gtf }}.transcriptome.fasta
    #}

- name: create_starfusion_resources_for_{{ reference | replace('.', '_') }}
  input:
    - {{ constants.grandcanyon[reference].reference_fasta }}
    - {{ constants.grandcanyon[reference].gtf }}
    - {{ constants.grandcanyon.dfam_db }}
  output: {{ constants.grandcanyon[reference].starfusion_index }}
  cpus: 32
  mem: 64G
  walltime: "72:00:00"
  container: {{ constants.tools.star_fusion.container }}
  digest: {{ constants.tools.star_fusion.digest }}
  cmd: |
    set -eu

    [ -e {{ constants.grandcanyon[reference].starfusion_index }} ] ||\
    /usr/local/src/STAR-Fusion/ctat-genome-lib-builder/prep_genome_lib.pl \
      --CPU 32 \
      --max_readlength 150 \
      --genome_fa {{ constants.grandcanyon[reference].reference_fasta }} \
      --gtf {{ constants.grandcanyon[reference].gtf }} \
      --pfam_db current \
      --dfam_db {{ constants.grandcanyon.dfam_db }} \
      --output_dir {{ constants.grandcanyon[reference].starfusion_index }}

{% endmacro %}
