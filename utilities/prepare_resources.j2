{% macro prepare_reference() %}

- name: create_samtools_resources_for_{{ reference | replace('.', '_') }}
  input: {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    - {{ constants.grandcanyon[reference].reference_fai }}
    - {{ constants.grandcanyon[reference].reference_dict }}
  cpus: 4
  mem: 16G
  walltime: "4:00:00"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -uev

    [ -e {{ constants.grandcanyon[reference].reference_fai }} ] ||\
    samtools faidx {{ constants.grandcanyon[reference].reference_fasta }}

    [ -e {{ constants.grandcanyon[reference].reference_dict }} ] ||\
    samtools dict \
      -o {{ constants.grandcanyon[reference].reference_dict }} \
      {{ constants.grandcanyon[reference].reference_fasta }}

{% endmacro %}

{% macro prepare_chunk_intervals(exclusion_list=none) %}

{% set temp_dir %}temp/pipeline_resources{% endset %}

- name: create_chunking_intervals_for_{{ reference | replace('.', '_') }}
  input: {{ constants.grandcanyon[reference].reference_fasta }}
  output:
    {% for chunk in range(1, num_chunks+1) %}
    - {{ temp_dir }}/calling_intervals/calling_interval_{{ chunk }}.bed
    {% endfor %}
  cpus: 4
  mem: 16G
  walltime: "4:00:00"
  container: {{ constants.tools.gatk.container }}
  cmd: |
    set -uev

    mkdir -p {{ temp_dir }}/calling_intervals

    gatk ScatterIntervalsByNs \
      --REFERENCE {{ constants.grandcanyon[reference].reference_fasta }} \
      --OUTPUT_TYPE ACGT \
      --OUTPUT {{ temp_dir }}/calling_intervals/{{ constants.grandcanyon[reference].reference_fasta | basename }}.ACGT.interval_list

    gatk IntervalListTools \
      --SCATTER_COUNT {{ num_chunks }} \
      --SUBDIVISION_MODE BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW \
      --PADDING 100 \
      --UNIQUE true \
      --SORT true \
      --INPUT {{ temp_dir }}/calling_intervals/{{ constants.grandcanyon[reference].reference_fasta | basename }}.ACGT.interval_list \
      --OUTPUT {{ temp_dir }}/calling_intervals/gatk_chunk_intervals

    for interval in {{ temp_dir }}/calling_intervals/gatk_chunk_intervals/temp_00*_of_{{ num_chunks }}/scattered.interval_list ; do
      chunk=$(echo "$interval" | grep -oP '[0-9]{4}' | sed 's/^0\+//')
      grep -v '^@' $interval | awk '{ OFS="\t" ; print $1,$2-1,$3 }' > {{ temp_dir }}/calling_intervals/calling_interval_${chunk}.bed
    done

{% endmacro %}

{% macro prepare_gene_model() %}

- name: create_gene_model_resources_for_{{ reference | replace('.', '_') }}
  input: {{ constants.grandcanyon[reference].gtf }}
  output:
    - {{ constants.grandcanyon[reference].gtf }}.gene.bed
    - {{ constants.grandcanyon[reference].gtf }}.exon.bed
    - {{ constants.grandcanyon[reference].gtf }}.cds.bed
  cpus: 4
  mem: 16G
  walltime: "4:00:00"
  container: {{ constants.tools.bedtools.container }}
  cmd: |
    set -uev

    awk -F '[\t"]' '$1 !~ /^#/ { if ($3 == "gene") { OFS = "\t" ; print $1, $4, $5, $10 }}' {{ constants.grandcanyon[reference].gtf }} |\
      sort -k1,1V -k2,2n -k3,3n > {{ constants.grandcanyon[reference].gtf }}.gene.bed

    awk -F '[\t"]' '$1 !~ /^#/ { if ($3 == "exon") { OFS = "\t" ; print $1, $4, $5, $10 }}' {{ constants.grandcanyon[reference].gtf }} |\
      sort -k1,1V -k2,2n -k3,3n > {{ constants.grandcanyon[reference].gtf }}.exon.bed

    awk -F '[\t"]' '$1 !~ /^#/ { if ($3 == "CDS" && $4 < $5) { OFS = "\t" ; print $1, $4, $5, "CDS" }}' {{ constants.grandcanyon[reference].gtf }} |\
      awk '!dup[$0]++' | sort -k1,1V -k2,2n -k3,3n | bedtools merge -i - > {{ constants.grandcanyon[reference].gtf }}.cds.bed

{% endmacro %}
