{# Tasks contains switches for toggling many of the features #}
{% if tasks is not defined %}
    {% set tasks = {} %}
{% endif %}

{% set required_scripts = {} %}
{% for name, value in constants.grandcanyon.required_scripts.items() %}
    {% set path = '${JS_PIPELINE_PATH}/' ~ __pipeline__.bin ~ value %}
    {% do required_scripts.update({name: {}}) %}
    {% do required_scripts[name].update({"path": path}) %}
{% endfor %}

{# submissionSource toggles specific tasks based on how they were submitted #}
{% if submissionSource is not defined %}
    {% set submissionSource = "unknown" %}
{% endif %}

{% from 'utilities/copy_fastq.j2' import copy_fastq with context %}
{% from 'utilities/copy_ubam.j2' import copy_ubam with context %}
{% from 'utilities/copy_bam.j2' import copy_bam with context %}
{% from 'modules/dna_alignment/main.j2' import dna_alignment with context %}
{% from 'modules/rna/main.j2' import rna_alignment with context %}
{% from 'modules/variant_calling/main.j2' import constitutional_variant_calling with context %}
{% from 'modules/assembly/main.j2' import assembly with context %}

{% set samples = {} %}

{% for file in dataFiles %}
    {% set bn = file.fastqPath | basename %}
    {% if 'sampleMergeKey' in file %}
        {% set name = file.sampleMergeKey %}
    {% else %}
        {% set name = file.sampleName %}
    {% endif %}

    {% do file.update({'name': name}) %}
    {% do file.update({'basename': bn}) %}
    {% do file.update({'gltype': file.glType.lower()}) %}
    {% do file.update({'glprep': file.glPrep.lower()}) %}
    {% do file.update({'path': file.fastqPath}) %}

    {% if 'subGroup' not in file %}
        {% do file.update({'subGroup': 'constitutional'}) %}
    {% endif %}

    {% if long_read_only is defined and long_read_only and file.rgpl not in ['ONT', 'PACBIO'] %}

    {% else %}
    {% if name not in samples %}
        {% do samples.update({name: {}}) %}
        {% do samples[name].update(file) %}
        {% do samples[name].update({"name": name}) %}
    {% endif %}
    {% endif %}

{% endfor %}

{% for rgid, data_files in dataFiles | groupby('rgid') %}
    {% set rg = data_files|first %}
    {% if 'sampleMergeKey' in rg %}
        {% set name = rg.sampleMergeKey %}
    {% else %}
        {% set name = rg.sampleName %}
    {% endif %}

    {% if name in samples %}
    {% if not 'read_groups' in samples[name] %}
        {% do samples[name].update({'read_groups': {}}) %}
    {% endif %}

    {% do samples[name]['read_groups'].update({rgid: {}}) %}
    {% do samples[name]['read_groups'][rgid].update(rg) %}
    {% do samples[name]['read_groups'][rgid].update({'data_files': data_files}) %}

    {% for file in data_files %}
      {% if file.fileType == "fastq" %}
        {{- copy_fastq(file) }}
      {% elif file.fileType == "ubam" %}
        {{- copy_ubam(file) }}
      {% elif file.fileType == "bam" %}
        {{- copy_bam(file) }}
      {% endif %}
    {% endfor %}

    {% endif %}
{% endfor %}

{% for sample in samples.values() %}
  {% for rgid, rg in sample.read_groups.items() %}
    {% for file in rg.data_files|selectattr('fastqCode', 'eq', 'simplex') %}
      {% set duplex_matches = rg.data_files|selectattr('fastqCode', 'eq', 'duplex')|selectattr('sampleName', 'eq', file.sampleName)|selectattr('rgid', 'eq', file.rgid)|list %}
      {% if duplex_matches | length > 0 %}
        {% do rg.data_files.pop(loop.index) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
{% endfor %}

{% for sample in samples.values() if sample.gltype == 'rna' %}
    {% set readOrientation=sample.readOrientation|default('inward')|lower %}
    {% set rnaStrandType=sample.rnaStrandType|default('unstranded')|lower %}
    {% set rnaStrandDirection=sample.rnaStrandDirection|default('notapplicable')|lower %}
    {% set strandedness %}{{ readOrientation }}-{{ rnaStrandType }}-{{ rnaStrandDirection }}{% endset %}
    {% do sample.update({'strandedness': strandedness}) %}
{% endfor %}

{# Start of module calls #}
{{- dna_alignment(samples) }}

{{- rna_alignment(samples) }}

{{- constitutional_variant_calling(samples) }}

{{- assembly(samples) }}

